//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.4952
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(ConfigurationName="IDebugService", CallbackContract=typeof(IDebugServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
public interface IDebugService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugService/Connect", ReplyAction="http://tempuri.org/IDebugService/ConnectResponse")]
    string[] Connect(string applicationName);
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IDebugService/Disconnect")]
    void Disconnect();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugService/Write", ReplyAction="http://tempuri.org/IDebugService/WriteResponse")]
    void Write(string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugService/WriteWithApplicationName", ReplyAction="http://tempuri.org/IDebugService/WriteWithApplicationNameResponse")]
    void WriteWithApplicationName(string applicationName, string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugService/WriteLine", ReplyAction="http://tempuri.org/IDebugService/WriteLineResponse")]
    void WriteLine(string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugService/WriteLineWithApplicationName", ReplyAction="http://tempuri.org/IDebugService/WriteLineWithApplicationNameResponse")]
    void WriteLineWithApplicationName(string applicationName, string message);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDebugService/Hi", ReplyAction="http://tempuri.org/IDebugService/HiResponse")]
    string Hi();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IDebugServiceCallback
{
    
    [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDebugService/Response")]
    void Response(string text);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IDebugServiceChannel : IDebugService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class DebugServiceClient : System.ServiceModel.DuplexClientBase<IDebugService>, IDebugService
{
    
    public DebugServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
            base(callbackInstance)
    {
    }
    
    public DebugServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
            base(callbackInstance, endpointConfigurationName)
    {
    }
    
    public DebugServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public DebugServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, endpointConfigurationName, remoteAddress)
    {
    }
    
    public DebugServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(callbackInstance, binding, remoteAddress)
    {
    }
    
    public string[] Connect(string applicationName)
    {
        return base.Channel.Connect(applicationName);
    }
    
    public void Disconnect()
    {
        base.Channel.Disconnect();
    }
    
    public void Write(string message)
    {
        base.Channel.Write(message);
    }
    
    public void WriteWithApplicationName(string applicationName, string message)
    {
        base.Channel.WriteWithApplicationName(applicationName, message);
    }
    
    public void WriteLine(string message)
    {
        base.Channel.WriteLine(message);
    }
    
    public void WriteLineWithApplicationName(string applicationName, string message)
    {
        base.Channel.WriteLineWithApplicationName(applicationName, message);
    }
    
    public string Hi()
    {
        return base.Channel.Hi();
    }
}
