<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="X3Platform.Entities.DAL.IBatis.EntityOperationLogProvider" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
    <alias>
        <typeAlias alias="EntityOperationLogInfo" type="X3Platform.Entities.Model.EntityOperationLogInfo, X3Platform.Entities" />
    </alias>
    <resultMaps>
        <resultMap id="proc_Entity_OperationLog_FindOne_Result" class="EntityOperationLogInfo">
            <result property="Id" column="Id" />
            <result property="EntityId" column="EntityId" />
            <result property="EntityClassName" column="EntityClassName" />
            <result property="AccountId" column="AccountId" />
            <result property="OperationType" column="OperationType" />
            <result property="ToAuthorizationObjectId" column="ToAuthorizationObjectId" />
            <result property="ToAuthorizationObjectType" column="ToAuthorizationObjectType" />
            <result property="Reason" column="Reason" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
        <resultMap id="proc_Entity_OperationLog_FindAll_Result" class="EntityOperationLogInfo">
            <result property="Id" column="Id" />
            <result property="EntityId" column="EntityId" />
            <result property="EntityClassName" column="EntityClassName" />
            <result property="AccountId" column="AccountId" />
            <result property="OperationType" column="OperationType" />
            <result property="ToAuthorizationObjectId" column="ToAuthorizationObjectId" />
            <result property="ToAuthorizationObjectType" column="ToAuthorizationObjectType" />
            <result property="Reason" column="Reason" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
    </resultMaps>
    <statements>        
        <insert id="proc_Entity_OperationLog_Save#MySql" >
            INSERT INTO $CustomTableName$ 
            (
                Id,
                EntityId,
                EntityClassName,
                AccountId,
                OperationType,
                ToAuthorizationObjectId,
                ToAuthorizationObjectType,
                Reason,
                CreateDate
            )
            VALUES
            (
                (REPLACE(LOWER(UUID()),'-','')),
                #EntityId#,
                #EntityClassName#,
                #AccountId#,
                #OperationType#,
                #ToAuthorizationObjectId#,
                #ToAuthorizationObjectType#,
                #Reason#,
                CURRENT_TIMESTAMP
            )
        </insert>
        <insert id="proc_Entity_OperationLog_Save#SqlServer" >
            INSERT INTO $CustomTableName$ 
            (
                Id,
                EntityId,
                EntityClassName,
                AccountId,
                OperationType,
                ToAuthorizationObjectId,
                ToAuthorizationObjectType,
                Reason,
                CreateDate
            )
            VALUES
            (
                (REPLACE(LOWER(NEWID()),'-','')),
                #EntityId#,
                #EntityClassName#,
                #AccountId#,
                #OperationType#,
                #ToAuthorizationObjectId#,
                #ToAuthorizationObjectType#,
                #Reason#,
                CURRENT_TIMESTAMP
            )
        </insert>
        <delete id="proc_Entity_OperationLog_Delete" >
            DELETE FROM $CustomTableName$ WHERE $WhereClause$
        </delete>
        <select id="proc_Entity_OperationLog_FindAll#MySql" resultMap="proc_Entity_OperationLog_FindAll_Result" >
            SELECT * FROM $CustomTableName$ T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
            
            <dynamic prepend="LIMIT">
                <isNotEqual prepend="LIMIT" property="Length" compareValue = "0">
                    0,$Length$
                </isNotEqual>
            </dynamic>
        </select>
        <select id="proc_Entity_OperationLog_FindAll#SqlServer" resultMap="proc_Entity_OperationLog_FindAll_Result" >
            SELECT

            <dynamic prepend="TOP">
                <isNotEqual prepend="TOP" property="Length" compareValue = "0">
                    $Length$
                </isNotEqual>
            </dynamic>

            * FROM $CustomTableName$ T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>
        <select id="proc_Entity_OperationLog_IsExist" >
            SELECT COUNT(0) AS 'Count' FROM $CustomTableName$ WHERE $WhereClause$
        </select>
    </statements>
</sqlMap>
