<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="X3Platform.Entities.DAL.IBatis.EntityFeedbackProvider" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
    <alias>
        <typeAlias alias="EntityFeedbackInfo" type="X3Platform.Entities.Model.EntityFeedbackInfo, X3Platform.Entities" />
    </alias>
    <resultMaps>
        <resultMap id="proc_Entity_Feedback_FindOne_Result" class="EntityFeedbackInfo">
            <result property="Id" column="Id" />
            <result property="EntityId" column="EntityId" />
            <result property="EntityClassName" column="EntityClassName" />
            <result property="AccountId" column="AccountId" />
            <result property="CompletionStatus" column="CompletionStatus" />
            <result property="WorkContent" column="WorkContent" />
            <result property="Status" column="Status" />
            <result property="UpdateDate" column="UpdateDate" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
        <resultMap id="proc_Entity_Feedback_FindAll_Result" class="EntityFeedbackInfo">
            <result property="Id" column="Id" />
            <result property="EntityId" column="EntityId" />
            <result property="EntityClassName" column="EntityClassName" />
            <result property="AccountId" column="AccountId" />
            <result property="CompletionStatus" column="CompletionStatus" />
            <result property="WorkContent" column="WorkContent" />
            <result property="Status" column="Status" />
            <result property="UpdateDate" column="UpdateDate" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
    </resultMaps>
    <statements>

        <insert id="proc_Entity_Feedback_Insert" parameterClass="EntityFeedbackInfo">
            INSERT INTO $CustomTableName$ 
            (
                Id,
                EntityId,
                EntityClassName,
                AccountId,
                CompletionStatus,
                WorkContent,
                Status,
                UpdateDate,
                CreateDate
            )
            VALUES
            (
                #Id#,
                #EntityId#,
                #EntityClassName#,
                #AccountId#,
                #CompletionStatus#,
                #WorkContent#,
                #Status#,
                CURRENT_TIMESTAMP,
                CURRENT_TIMESTAMP
            )
        </insert>

        <update id="proc_Entity_Feedback_Update" parameterClass="EntityFeedbackInfo">
            UPDATE $CustomTableName$ SET

            Id = #Id#,
            EntityId = #EntityId#,
            EntityClassName = #EntityClassName#,
            AccountId = #AccountId#,
            CompletionStatus = #CompletionStatus#,
            WorkContent = #WorkContent#,
            Status = #Status#,
            UpdateDate = CURRENT_TIMESTAMP

            WHERE Id = #Id#
        </update>

        <delete id="proc_Entity_Feedback_Delete" >
            DELETE FROM $CustomTableName$ WHERE $WhereClause$
        </delete>

        <select id="proc_Entity_Feedback_FindOne" resultMap="proc_Entity_Feedback_FindOne_Result" >
            SELECT * FROM $CustomTableName$ T
            WHERE Id = #Id#
        </select>

        <select id="proc_Entity_Feedback_FindAll" resultMap="proc_Entity_Feedback_FindAll_Result" >
            SELECT

            <dynamic prepend="TOP">
                <isNotEqual prepend="TOP" property="Length" compareValue = "0">
                    $Length$
                </isNotEqual>
            </dynamic>

            * FROM $CustomTableName$ T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>

        <select id="proc_Entity_Feedback_GetPaging" resultMap="proc_Entity_Feedback_FindAll_Result" >
            SELECT *

            FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

            FROM $CustomTableName$ T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>) TableIndex

            WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$

        </select>

        <select id="proc_Entity_Feedback_GetRowCount" >

            SELECT COUNT(*) AS 'RowCount' FROM $CustomTableName$ T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>

        <select id="proc_Entity_Feedback_IsExist" >
            SELECT COUNT(0) AS 'Count' FROM $CustomTableName$ T WHERE $WhereClause$
        </select>

    </statements>
</sqlMap>
