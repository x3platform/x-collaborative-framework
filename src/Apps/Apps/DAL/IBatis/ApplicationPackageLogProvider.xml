<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="X3Platform.Apps.DAL.IBatis.ApplicationPackageLogProvider" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
    <alias>
        <typeAlias alias="ApplicationPackageLogInfo" type="X3Platform.Apps.Model.ApplicationPackageLogInfo, X3Platform.Apps" />
    </alias>
    <resultMaps>
        <resultMap id="proc_Application_PackageLog_FindOne_Result" class="ApplicationPackageLogInfo">
            <result property="Id" column="Id" />
            <result property="ApplicationId" column="ApplicationId" />
            <result property="PackageCode" column="PackageCode" />
            <result property="Success" column="Success" />
            <result property="Message" column="Message" />
            <result property="Date" column="Date" />
        </resultMap>
        <resultMap id="proc_Application_PackageLog_FindAll_Result" class="ApplicationPackageLogInfo">
            <result property="Id" column="Id" />
            <result property="ApplicationId" column="ApplicationId" />
            <result property="PackageCode" column="PackageCode" />
            <result property="Success" column="Success" />
            <result property="Message" column="Message" />
            <result property="Date" column="Date" />
        </resultMap>
    </resultMaps>
    <statements>

        <insert id="proc_Application_PackageLog_Insert" parameterClass="ApplicationPackageLogInfo">
            INSERT INTO tb_Application_PackageLog 
            (
                Id,
                ApplicationId,
                PackageCode,
                Success,
                Message,
                Date
            )
            VALUES
            (
                #Id#,
                #ApplicationId#,
                #PackageCode#,
                #Success#,
                #Message#,
                #Date#
            )
        </insert>

        <update id="proc_Application_PackageLog_Update" parameterClass="ApplicationPackageLogInfo">
            UPDATE tb_Application_PackageLog SET

                Id = #Id#,
                ApplicationId = #ApplicationId#,
                PackageCode = #PackageCode#,
                Success = #Success#,
                Message = #Message#,
                Date = #Date#

            WHERE Id = #Id#
        </update>

        <delete id="proc_Application_PackageLog_Delete" >
            DELETE FROM tb_Application_PackageLog WHERE $WhereClause$
        </delete>

        <select id="proc_Application_PackageLog_FindOne" resultMap="proc_Application_PackageLog_FindOne_Result" >
            SELECT * FROM tb_Application_PackageLog T
            WHERE Id = #Id#
        </select>

        <select id="proc_Application_PackageLog_FindAll" resultMap="proc_Application_PackageLog_FindAll_Result" >
            SELECT

            <dynamic prepend="TOP">
                <isNotEqual prepend="TOP" property="Length" compareValue = "0">
                    $Length$
                </isNotEqual>
            </dynamic>

            * FROM tb_Application_PackageLog T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>

        <select id="proc_Application_PackageLog_GetPages" resultMap="proc_Application_PackageLog_FindAll_Result" >
            SELECT *

            FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

            FROM tb_Application_PackageLog T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>) TableIndex

            WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$

        </select>

        <select id="proc_Application_PackageLog_GetRowCount" >

            SELECT COUNT(*) AS 'RowCount' FROM tb_Application_PackageLog T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>

        <select id="proc_Application_PackageLog_IsExist" >
            SELECT COUNT(0) AS 'Count' FROM tb_Application_PackageLog T WHERE $WhereClause$
        </select>

    </statements>
</sqlMap>
