<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="X3Platform.Apps.DAL.IBatis.ApplicationOptionProvider" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
	<alias>
		<typeAlias alias="ApplicationOptionInfo" type="X3Platform.Apps.Model.ApplicationOptionInfo,X3Platform.Apps" />
	</alias>
	<resultMaps>
		<resultMap id="proc_Application_Option_FindOne_Result" class="ApplicationOptionInfo">
			<result property="ApplicationId" column="ApplicationId" />
			<result property="Name" column="Name" />
			<result property="Label" column="Label" />
        	<result property="Description" column="Description" />
        	<result property="Value" column="Value" />
            <result property="IsInternal" column="IsInternal" />
			<result property="OrderId" column="OrderId" />
			<result property="Status" column="Status" />
			<result property="Remark" column="Remark" />
			<result property="UpdateDate" column="UpdateDate" />
			<result property="CreateDate" column="CreateDate" />
		</resultMap>
		<resultMap id="proc_Application_Option_FindAll_Result" class="ApplicationOptionInfo">
			<result property="ApplicationId" column="ApplicationId" />
			<result property="Name" column="Name" />
			<result property="Label" column="Label" />
        	<result property="Description" column="Description" />
        	<result property="Value" column="Value" />
            <result property="IsInternal" column="IsInternal" />
			<result property="OrderId" column="OrderId" />
			<result property="Status" column="Status" />
			<result property="Remark" column="Remark" />
			<result property="UpdateDate" column="UpdateDate" />
			<result property="CreateDate" column="CreateDate" />
		</resultMap>
	</resultMaps>
	<statements>
		<insert id="proc_Application_Option_Insert" parameterClass="ApplicationOptionInfo">
			INSERT INTO [tb_Application_Option]
			(
                [ApplicationId],
				[Name],
			    [Label],
        	    [Description],
        		[Value],
			    [IsInternal],
			    [OrderId],
			    [Status],
				[Remark],
                [UpdateDate],
				[CreateDate]
			)
			VALUES
			(
                #ApplicationId#,
				#Name#,
			    #Label#,
        	    #Description#,
				#Value#,
                #IsInternal#,
			    #OrderId#,
			    #Status#,
				#Remark#,
				GETDATE(),
				GETDATE()
			)
		</insert>

		<update id="proc_Application_Option_Update" parameterClass="ApplicationOptionInfo">
			UPDATE [tb_Application_Option] SET

				[ApplicationId] = #ApplicationId#,
				[Label] = #Label#,
        	    [Description] = #Description#,
				[Value] = #Value#,
                [IsInternal] = #IsInternal#,
			    [OrderId] = #OrderId#,
			    [Status] = #Status#,
                [Remark] = #Remark#,
				[UpdateDate] = GETDATE()

			WHERE [Name] = #Name#
		</update>

		<update id="proc_Application_Option_Delete" >
			UPDATE [tb_Application_Option] SET [Status] = 0 WHERE $WhereClause$
		</update>

		<delete id="proc_Application_Option_Delete(PhysicallyRemoved)" >
			DELETE FROM [tb_Application_Option] WHERE $WhereClause$
		</delete>

		<update id="proc_Application_Option_Delete(VirtualRemoved)" >
			UPDATE [tb_Application_Option] SET [Status] = 0 WHERE $WhereClause$
		</update>

		<select id="proc_Application_Option_FindOne" resultMap="proc_Application_Option_FindOne_Result" >
			SELECT * FROM [tb_Application_Option] T WHERE [Name] = #Name#
		</select>

		<select id="proc_Application_Option_FindAll" resultMap="proc_Application_Option_FindAll_Result" >
			SELECT

			<dynamic prepend="TOP">
				<isNotEqual prepend="TOP" property="Length" compareValue = "0">
					$Length$
				</isNotEqual>
			</dynamic>

			* FROM [tb_Application_Option] T

			  <dynamic prepend="WHERE">
				<isParameterPresent>
				  <isNotEmpty prepend="AND" property="WhereClause" >
					$WhereClause$
				  </isNotEmpty>
				</isParameterPresent>
			  </dynamic>
		</select>

		<select id="proc_Application_Option_GetPages" resultMap="proc_Application_Option_FindAll_Result" >
			SELECT *

			FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

				FROM [tb_Application_Option] T

				<dynamic prepend="WHERE">
				<isParameterPresent>
				  <isNotEmpty prepend="AND" property="WhereClause" >
					$WhereClause$
				  </isNotEmpty>
				</isParameterPresent>
				</dynamic>) TableIndex

			WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$
		</select>

        <!-- SQL Server 2000 -->
		<select id="proc_Application_Option_GetPages(SQLServer2000)" resultMap="proc_Application_Option_FindAll_Result" >
			SELECT TOP $PageSize$ *

			FROM [tb_Application_Option] T

			WHERE Id NOT IN (
				SELECT TOP $StartIndex$ Id FROM [tb_Application_Option] T
				<dynamic prepend="WHERE">
					<isParameterPresent>
						<isNotEmpty prepend="AND" property="WhereClause" >
						$WhereClause$
						</isNotEmpty>
					</isParameterPresent>
				</dynamic> ORDER BY $OrderBy$ )

			<dynamic prepend="AND">
				<isParameterPresent>
				  <isNotEmpty prepend="AND" property="WhereClause" >
					$WhereClause$
				  </isNotEmpty>
				</isParameterPresent>
			</dynamic>
			ORDER BY $OrderBy$
		</select>

        <!-- SQL Server 2005 / SQL Server 2008 (默认) -->
		<select id="proc_Application_Option_GetPages(SQLServer2008)" resultMap="proc_Application_Option_FindAll_Result" >
			SELECT *

			FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

				FROM [tb_Application_Option] T

				<dynamic prepend="WHERE">
				<isParameterPresent>
				  <isNotEmpty prepend="AND" property="WhereClause" >
					$WhereClause$
				  </isNotEmpty>
				</isParameterPresent>
				</dynamic>) TableIndex

			WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$
		</select>

		<select id="proc_Application_Option_GetRowCount" >
			SELECT COUNT(0) AS 'RowCount' FROM [tb_Application_Option] T

			<dynamic prepend="WHERE">
			<isParameterPresent>
			  <isNotEmpty prepend="AND" property="WhereClause" >
				$WhereClause$
			  </isNotEmpty>
			</isParameterPresent>
			</dynamic>
		</select>

		<select id="proc_Application_Option_IsExist" >
			SELECT COUNT(0) AS 'Count' FROM [tb_Application_Option] T WHERE $WhereClause$
		</select>
	</statements>
</sqlMap>
