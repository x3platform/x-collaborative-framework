<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="X3Platform.Storages.DAL.IBatis.StorageSchemaProvider" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
	<alias>
		<typeAlias alias="StorageSchemaInfo" type="X3Platform.Storages.Model.StorageSchemaInfo,X3Platform.Storages" />
	</alias>
	<resultMaps>
		<resultMap id="proc_Storage_Schema_FindOne_Result" class="StorageSchemaInfo">
			<result property="Id" column="Id" />
			<result property="ApplicationId" column="ApplicationId" />
			<result property="AdapterClassName" column="AdapterClassName" />
			<result property="StrategyClassName" column="StrategyClassName" />
			<result property="Options" column="Options" />
			<result property="OrderId" column="OrderId" />
			<result property="Remark" column="Remark" />
			<result property="UpdateDate" column="UpdateDate" />
			<result property="CreateDate" column="CreateDate" />
		</resultMap>
		<resultMap id="proc_Storage_Schema_FindAll_Result" class="StorageSchemaInfo">
			<result property="Id" column="Id" />
			<result property="ApplicationId" column="ApplicationId" />
			<result property="AdapterClassName" column="AdapterClassName" />
			<result property="StrategyClassName" column="StrategyClassName" />
			<result property="Options" column="Options" />
			<result property="OrderId" column="OrderId" />
			<result property="Remark" column="Remark" />
			<result property="UpdateDate" column="UpdateDate" />
			<result property="CreateDate" column="CreateDate" />
		</resultMap>
	</resultMaps>
	<statements>
		<insert id="proc_Storage_Schema_Insert" parameterClass="StorageSchemaInfo">
			INSERT INTO [tb_Storage_Schema]
			(
				[Id],
				[ApplicationId],
				[AdapterClassName],
				[StrategyClassName],
				[Options],
				[OrderId],
				[Remark],
				[UpdateDate],
				[CreateDate]
			)
			VALUES
			(
				#Id#,
				#ApplicationId#,
				#AdapterClassName#,
				#StrategyClassName#,
				#Options#,
				#OrderId#,
				#Remark#,
				CURRENT_TIMESTAMP,
				CURRENT_TIMESTAMP
			)
		</insert>

		<update id="proc_Storage_Schema_Update" parameterClass="StorageSchemaInfo">
			UPDATE [tb_Storage_Schema] SET

				[ApplicationId] = #ApplicationId#,
				[AdapterClassName] = #AdapterClassName#,
				[StrategyClassName] = #StrategyClassName#,
				[Options] = #Options#,
				[OrderId] = #OrderId#,
				[Remark] = #Remark#,
				[UpdateDate] = CURRENT_TIMESTAMP
			
			WHERE [Id] = #Id#
		</update>

		<update id="proc_Storage_Schema_Delete" >
			UPDATE [tb_Storage_Schema] SET [Status] = 0 WHERE $WhereClause$
		</update>

		<delete id="proc_Storage_Schema_Delete(PhysicallyRemoved)" >
			DELETE FROM [tb_Storage_Schema] WHERE $WhereClause$
		</delete>

		<update id="proc_Storage_Schema_Delete(VirtualRemoved)" >
			UPDATE [tb_Storage_Schema] SET [Status] = 0 WHERE $WhereClause$
		</update>

		<select id="proc_Storage_Schema_FindOne" resultMap="proc_Storage_Schema_FindOne_Result" >
			SELECT * FROM [tb_Storage_Schema] T WHERE [Id] = #Id#
		</select>

		<select id="proc_Storage_Schema_FindOneByApplicationId" resultMap="proc_Storage_Schema_FindOne_Result" >
			SELECT * FROM [tb_Storage_Schema] T WHERE [ApplicationId] = #ApplicationId#
		</select>

		<select id="proc_Storage_Schema_FindOneByApplicationName" resultMap="proc_Storage_Schema_FindOne_Result" >
			SELECT * FROM `tb_Storage_Schema` T WHERE `ApplicationId` IN ( SELECT Id FROM `tb_Application` WHERE `ApplicationName` = #ApplicationName# )
		</select>

		<select id="proc_Storage_Schema_FindAll" resultMap="proc_Storage_Schema_FindAll_Result" >
			SELECT

			<dynamic prepend="TOP">
				<isNotEqual prepend="TOP" property="Length" compareValue = "0">
					$Length$
				</isNotEqual>
			</dynamic>

			* FROM [tb_Storage_Schema] T

			  <dynamic prepend="WHERE">
				<isParameterPresent>
				  <isNotEmpty prepend="AND" property="WhereClause" >
					$WhereClause$
				  </isNotEmpty>
				</isParameterPresent>
			  </dynamic>
		</select>

		<select id="proc_Storage_Schema_GetPaging" resultMap="proc_Storage_Schema_FindAll_Result" >
			SELECT *

			FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

				FROM [tb_Storage_Schema] T

				<dynamic prepend="WHERE">
				<isParameterPresent>
				  <isNotEmpty prepend="AND" property="WhereClause" >
					$WhereClause$
				  </isNotEmpty>
				</isParameterPresent>
				</dynamic>) TableIndex

			WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$
		</select>

        <!-- SQL Server 2000 -->
		<select id="proc_Storage_Schema_GetPaging(SQLServer2000)" resultMap="proc_Storage_Schema_FindAll_Result" >
			SELECT TOP $PageSize$ *

			FROM [tb_Storage_Schema] T

			WHERE Id NOT IN (
				SELECT TOP $StartIndex$ Id FROM [tb_Storage_Schema] T
				<dynamic prepend="WHERE">
					<isParameterPresent>
						<isNotEmpty prepend="AND" property="WhereClause" >
						$WhereClause$
						</isNotEmpty>
					</isParameterPresent>
				</dynamic> ORDER BY $OrderBy$ )

			<dynamic prepend="AND">
				<isParameterPresent>
				  <isNotEmpty prepend="AND" property="WhereClause" >
					$WhereClause$
				  </isNotEmpty>
				</isParameterPresent>
			</dynamic>
			ORDER BY $OrderBy$
		</select>

        <!-- SQL Server 2005 / SQL Server 2008 (默认) -->
		<select id="proc_Storage_Schema_GetPaging(SQLServer2008)" resultMap="proc_Storage_Schema_FindAll_Result" >
			SELECT *

			FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

				FROM [tb_Storage_Schema] T

				<dynamic prepend="WHERE">
				<isParameterPresent>
				  <isNotEmpty prepend="AND" property="WhereClause" >
					$WhereClause$
				  </isNotEmpty>
				</isParameterPresent>
				</dynamic>) TableIndex

			WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$
		</select>

		<select id="proc_Storage_Schema_GetRowCount" >
			SELECT COUNT(0) AS 'RowCount' FROM [tb_Storage_Schema] T

			<dynamic prepend="WHERE">
			<isParameterPresent>
			  <isNotEmpty prepend="AND" property="WhereClause" >
				$WhereClause$
			  </isNotEmpty>
			</isParameterPresent>
			</dynamic>
		</select>

		<select id="proc_Storage_Schema_IsExist" >
			SELECT COUNT(0) AS 'Count' FROM [tb_Storage_Schema] T WHERE $WhereClause$
		</select>
	</statements>
</sqlMap>
