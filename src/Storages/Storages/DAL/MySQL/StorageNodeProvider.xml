<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="X3Platform.Storages.DAL.MySQL.StorageNodeProvider" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
	<alias>
		<typeAlias alias="StorageNodeInfo" type="X3Platform.Storages.Model.StorageNodeInfo,X3Platform.Storages" />
	</alias>
	<resultMaps>
		<resultMap id="proc_Storage_Node_FindOne_Result" class="StorageNodeInfo">
			<result property="Id" column="Id" />
			<result property="StorageSchemaId" column="StorageSchemaId" />
			<result property="Name" column="Name" />
			<result property="Type" column="Type" />
			<result property="ProviderName" column="ProviderName" />
			<result property="ConnectionString" column="ConnectionString" />
			<result property="ConnectionState" column="ConnectionState" />
			<result property="OrderId" column="OrderId" />
			<result property="Status" column="Status" />
			<result property="Remark" column="Remark" />
			<result property="UpdateDate" column="UpdateDate" />
			<result property="CreateDate" column="CreateDate" />
		</resultMap>
		<resultMap id="proc_Storage_Node_FindAll_Result" class="StorageNodeInfo">
			<result property="Id" column="Id" />
			<result property="StorageSchemaId" column="StorageSchemaId" />
			<result property="Name" column="Name" />
			<result property="Type" column="Type" />
			<result property="ProviderName" column="ProviderName" />
			<result property="ConnectionString" column="ConnectionString" />
			<result property="ConnectionState" column="ConnectionState" />
			<result property="OrderId" column="OrderId" />
			<result property="Status" column="Status" />
			<result property="Remark" column="Remark" />
			<result property="UpdateDate" column="UpdateDate" />
			<result property="CreateDate" column="CreateDate" />
		</resultMap>
	</resultMaps>
	<statements>
		<insert id="proc_Storage_Node_Insert" parameterClass="StorageNodeInfo">
			INSERT INTO tb_Storage_Node
			(
				Id,
				StorageSchemaId,
				Name,
				Type,
				ProviderName,
				ConnectionString,
				ConnectionState,
				OrderId,
				Status,
				Remark,
				UpdateDate,
				CreateDate
			)
			VALUES
			(
				#Id#,
				#StorageSchemaId#,
				#Name#,
				#Type#,
                #ProviderName#,
				#ConnectionString#,
				#ConnectionState#,
				#OrderId#,
				#Status#,
				#Remark#,
				CURRENT_TIMESTAMP,
				CURRENT_TIMESTAMP
			)
		</insert>

		<update id="proc_Storage_Node_Update" parameterClass="StorageNodeInfo">
			UPDATE tb_Storage_Node SET

				StorageSchemaId = #StorageSchemaId#,
				Name = #Name#,
				Type = #Type#,
				ProviderName = #ProviderName#,
				ConnectionString = #ConnectionString#,
				ConnectionState = #ConnectionState#,
				OrderId = #OrderId#,
				Status = #Status#,
				Remark = #Remark#,
				UpdateDate = CURRENT_TIMESTAMP

			WHERE Id = #Id#
		</update>

		<update id="proc_Storage_Node_Delete" >
			UPDATE tb_Storage_Node SET Status = 0 WHERE $WhereClause$
		</update>

		<delete id="proc_Storage_Node_Delete(PhysicallyRemoved)" >
			DELETE FROM tb_Storage_Node WHERE $WhereClause$
		</delete>

		<update id="proc_Storage_Node_Delete(VirtualRemoved)" >
			UPDATE tb_Storage_Node SET Status = 0 WHERE $WhereClause$
		</update>

		<select id="proc_Storage_Node_FindOne" resultMap="proc_Storage_Node_FindOne_Result" >
			SELECT * FROM tb_Storage_Node T WHERE Id = #Id#
		</select>

		<select id="proc_Storage_Node_FindAll" resultMap="proc_Storage_Node_FindAll_Result" >
			SELECT

			<dynamic prepend="TOP">
				<isNotEqual prepend="TOP" property="Length" compareValue = "0">
					$Length$
				</isNotEqual>
			</dynamic>

			* FROM tb_Storage_Node T

			  <dynamic prepend="WHERE">
				<isParameterPresent>
				  <isNotEmpty prepend="AND" property="WhereClause" >
					$WhereClause$
				  </isNotEmpty>
				</isParameterPresent>
			  </dynamic>
		</select>

		<select id="proc_Storage_Node_GetPaging" resultMap="proc_Storage_Node_FindAll_Result" >
			SELECT *

			FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

				FROM tb_Storage_Node T

				<dynamic prepend="WHERE">
				<isParameterPresent>
				  <isNotEmpty prepend="AND" property="WhereClause" >
					$WhereClause$
				  </isNotEmpty>
				</isParameterPresent>
				</dynamic>) TableIndex

			WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$
		</select>

        <!-- SQL Server 2000 -->
		<select id="proc_Storage_Node_GetPaging(SQLServer2000)" resultMap="proc_Storage_Node_FindAll_Result" >
			SELECT TOP $PageSize$ *

			FROM tb_Storage_Node T

			WHERE Id NOT IN (
				SELECT TOP $StartIndex$ Id FROM tb_Storage_Node T
				<dynamic prepend="WHERE">
					<isParameterPresent>
						<isNotEmpty prepend="AND" property="WhereClause" >
						$WhereClause$
						</isNotEmpty>
					</isParameterPresent>
				</dynamic> ORDER BY $OrderBy$ )

			<dynamic prepend="AND">
				<isParameterPresent>
				  <isNotEmpty prepend="AND" property="WhereClause" >
					$WhereClause$
				  </isNotEmpty>
				</isParameterPresent>
			</dynamic>
			ORDER BY $OrderBy$
		</select>

        <!-- SQL Server 2005 / SQL Server 2008 (默认) -->
		<select id="proc_Storage_Node_GetPaging(SQLServer2008)" resultMap="proc_Storage_Node_FindAll_Result" >
			SELECT *

			FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

				FROM tb_Storage_Node T

				<dynamic prepend="WHERE">
				<isParameterPresent>
				  <isNotEmpty prepend="AND" property="WhereClause" >
					$WhereClause$
				  </isNotEmpty>
				</isParameterPresent>
				</dynamic>) TableIndex

			WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$
		</select>

		<select id="proc_Storage_Node_GetRowCount" >
			SELECT COUNT(0) AS 'RowCount' FROM tb_Storage_Node T

			<dynamic prepend="WHERE">
			<isParameterPresent>
			  <isNotEmpty prepend="AND" property="WhereClause" >
				$WhereClause$
			  </isNotEmpty>
			</isParameterPresent>
			</dynamic>
		</select>

		<select id="proc_Storage_Node_IsExist" >
			SELECT COUNT(0) AS 'Count' FROM tb_Storage_Node T WHERE $WhereClause$
		</select>
	</statements>
</sqlMap>
