<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="X3Platform.Plugins.Bugs.DAL.IBatis.BugCommentProvider" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
    <alias>
        <typeAlias alias="BugCommentInfo" type="X3Platform.Plugins.Bugs.Model.BugCommentInfo, X3Platform.Plugins.Bugs" />
    </alias>
    <resultMaps>
        <resultMap id="proc_Bug_Comment_FindOne_Result" class="BugCommentInfo">
            <result property="Id" column="Id" />
            <result property="BugId" column="BugId" />
            <result property="AccountId" column="AccountId" />
            <result property="Title" column="Title" />
            <result property="Content" column="Content" />
            <result property="UpdateDate" column="UpdateDate" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
        <resultMap id="proc_Bug_Comment_FindAll_Result" class="BugCommentInfo">
            <result property="Id" column="Id" />
            <result property="BugId" column="BugId" />
            <result property="AccountId" column="AccountId" />
            <result property="Title" column="Title" />
            <result property="Content" column="Content" />
            <result property="UpdateDate" column="UpdateDate" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
    </resultMaps>
    <statements>
        <insert id="proc_Bug_Comment_Insert" parameterClass="BugCommentInfo" >
            INSERT INTO tb_Bug_Comment
            (
                Id,
                BugId,
                AccountId,
                Title,
                Content,
                UpdateDate,
                CreateDate
            )
            VALUES
            (
                #Id#,
                #BugId#,
                #AccountId#,
                #Title#,
                #Content#,
                CURRENT_TIMESTAMP,
                CURRENT_TIMESTAMP
            )
        </insert>

        <update id="proc_Bug_Comment_Update" parameterClass="BugCommentInfo" >
            UPDATE tb_Bug_Comment SET

                BugId = #BugId#,
                Title = #Title#,
                Content = #Content#,
                UpdateDate = CURRENT_TIMESTAMP

            WHERE Id = #Id# and AccountId = #AccountId#
        </update>

        <delete id="proc_Bug_Comment_Delete">
            DELETE FROM tb_Bug_Comment WHERE Id IN ($Ids$)
        </delete>

        <delete id="proc_Bug_Comment_DeleteByBugId">
            DELETE FROM tb_Bug_Comment WHERE BugId = #BugId#
        </delete>

        <select id="proc_Bug_Comment_FindOne" parameterClass="BugCommentInfo" resultMap="proc_Bug_Comment_FindOne_Result" >
            SELECT * FROM tb_Bug_Comment WHERE Id = #Id#
        </select>

        <select id="proc_Bug_Comment_FindAll#MySql" resultMap="proc_Bug_Comment_FindAll_Result" parameterClass="BugCommentInfo" >
            SELECT * 
            
            FROM tb_Bug_Comment T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
            
            <dynamic prepend="LIMIT">
                <isNotEqual prepend="LIMIT" property="Length" compareValue = "0">
                    0,$Length$
                </isNotEqual>
            </dynamic>
        </select>

        <select id="proc_Bug_Comment_FindAll#SqlServer" resultMap="proc_Bug_Comment_FindAll_Result" parameterClass="BugCommentInfo" >
            SELECT

            <dynamic prepend="TOP">
                <isNotEqual prepend="TOP" property="Length" compareValue = "0">
                    $Length$
                </isNotEqual>
            </dynamic>

            * FROM tb_Bug_Comment T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>
        <select id="proc_Bug_Comment_GetPaging#MySql" parameterClass="BugCommentInfo" resultMap="proc_Bug_Comment_FindAll_Result" >
            SELECT *

            FROM tb_Bug_Comment T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>

            ORDER BY $OrderBy$
            
            LIMIT $StartIndex$, $PageSize$
        </select>
        <select id="proc_Bug_Comment_GetPaging#SqlServer" parameterClass="BugCommentInfo" resultMap="proc_Bug_Comment_FindAll_Result" >
            SELECT *

            FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

            FROM tb_Bug_Comment T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>) TableIndex

            WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$

        </select>

        <select id="proc_Bug_Comment_GetRowCount" >

            SELECT COUNT(*) AS 'RowCount' FROM tb_Bug_Comment T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>

        <select id="proc_Bug_Comment_IsExist" >
            SELECT COUNT(*) AS 'Count' FROM tb_Bug_Comment T WHERE Id = #Id#
        </select>
    </statements>
</sqlMap>