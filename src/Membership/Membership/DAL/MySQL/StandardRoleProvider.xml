<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="X3Platform.Membership.DAL.MySQL.StandardRoleProvider" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
    <alias>
        <typeAlias alias="StandardRoleInfo" type="X3Platform.Membership.Model.StandardRoleInfo,X3Platform.Membership" />
    </alias>
    <resultMaps>
        <resultMap id="proc_StandardRole_FindOne_Result" class="StandardRoleInfo">
            <result property="Id" column="Id" />
            <result property="Code" column="Code" />
            <result property="Name" column="Name" />
            <result property="Type" column="Type" />
            <result property="Priority" column="Priority" />
            <result property="ParentId" column="ParentId" />
            <result property="StandardOrganizationId" column="StandardOrganizationId" />
            <result property="GroupTreeNodeId" column="GroupTreeNodeId" />
            <result property="IsKey" column="IsKey" />
            <result property="IsDraft" column="IsDraft" />
            <result property="Lock" column="Lock" />
            <result property="OrderId" column="OrderId" />
            <result property="Status" column="Status" />
            <result property="Remark" column="Remark" />
            <result property="UpdateDate" column="UpdateDate" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
        <resultMap id="proc_StandardRole_FindAll_Result" class="StandardRoleInfo">
            <result property="Id" column="Id" />
            <result property="Code" column="Code" />
            <result property="Name" column="Name" />
            <result property="Type" column="Type" />
            <result property="Priority" column="Priority" />
            <result property="ParentId" column="ParentId" />
            <result property="StandardOrganizationId" column="StandardOrganizationId" />
            <result property="GroupTreeNodeId" column="GroupTreeNodeId" />
            <result property="IsKey" column="IsKey" />
            <result property="IsDraft" column="IsDraft" />
            <result property="Lock" column="Lock" />
            <result property="OrderId" column="OrderId" />
            <result property="Status" column="Status" />
            <result property="Remark" column="Remark" />
            <result property="UpdateDate" column="UpdateDate" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
    </resultMaps>
    <statements>

        <insert id="proc_StandardRole_Insert" parameterClass="StandardRoleInfo">
            INSERT INTO `tb_StandardRole` (
            `Id`,
            `Code`,
            `Name`,
            `Type`,
            `Priority`,
            `ParentId`,
            `StandardOrganizationId`,
            `GroupTreeNodeId`,
            `IsKey`,
            `IsDraft`,
            `Lock`,
            `ParentId`,
            `OrderId`,
            `Status`,
            `Remark`,
            `UpdateDate`,
            `CreateDate`
            )
            VALUES
            (
            #Id#,
            #Code#,
            #Name#,
            #Type#,
            #Priority#,
            #ParentId#,
            #StandardOrganizationId#,
            #GroupTreeNodeId#,
            #IsKey#,
            #IsDraft#,
            #Lock#,
            #OrderId#,
            #Status#,
            #Remark#,
            GetDate(),
            GetDate()
            )
        </insert>

        <update id="proc_StandardRole_Update" parameterClass="StandardRoleInfo">
            UPDATE `tb_StandardRole` SET

            `Code` = #Code#,
            `Name` = #Name#,
            `Type` = #Type#,
            `Priority` = #Priority#,
            `ParentId` = #ParentId#,
            `StandardOrganizationId` = #StandardOrganizationId#,
            `GroupTreeNodeId` = #GroupTreeNodeId#,
            `IsKey` =  #IsKey#,
            `IsDraft` =  #IsDraft#,
            `Lock` =  #Lock#,
            `OrderId` = #OrderId#,
            `Status` = #Status#,
            `Remark` = #Remark#,
            `UpdateDate` = GetDate()

            WHERE `Id` = #Id#
        </update>

        <delete id="proc_StandardRole_Delete" >
            DELETE FROM `tb_StandardRole` WHERE $WhereClause$
        </delete>

        <select id="proc_StandardRole_FindOne" resultMap="proc_StandardRole_FindOne_Result" >
            SELECT * FROM `tb_StandardRole` T
            WHERE `Id` = #Id#
        </select>

        <select id="proc_StandardRole_FindAll" resultMap="proc_StandardRole_FindAll_Result" >
            SELECT

            <dynamic prepend="TOP">
                <isNotEqual prepend="TOP" property="Length" compareValue = "0">
                    $Length$
                </isNotEqual>
            </dynamic>

            * FROM `tb_StandardRole` T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>

        <select id="proc_StandardRole_GetPages" resultMap="proc_StandardRole_FindAll_Result" >
            SELECT *

            FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

            FROM `tb_StandardRole` T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>) TableIndex

            WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$

        </select>

        <select id="proc_StandardRole_GetRowCount" >

            SELECT COUNT(*) AS 'RowCount' FROM `tb_StandardRole` T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>

        <select id="proc_StandardRole_IsExist" >
            SELECT COUNT(0) AS 'Count' FROM `tb_StandardRole` T WHERE $WhereClause$
        </select>

        <update id="proc_StandardRole_Rename" parameterClass="StandardRoleInfo">
            UPDATE `tb_StandardRole` SET

            `Name` = #Name#,
            `UpdateDate` = GetDate()

            WHERE `Id` = #Id#
        </update>

        <insert id="proc_StandardRole_SyncFromPackPage" parameterClass="StandardRoleInfo" >
            IF EXISTS(SELECT 0 FROM `tb_StandardRole` WHERE `Id` = #Id#)
            BEGIN
            UPDATE `tb_StandardRole` SET

            `Code` = #Code#,
            `Name` = #Name#,
            `Type` = #Type#,
            `ParentId` = #ParentId#,
            `StandardOrganizationId` = #StandardOrganizationId#,
            `IsKey` =  #IsKey#,
            `GroupTreeNodeId` = #GroupTreeNodeId#,
            `OrderId` = #OrderId#,
            `Status` = #Status#,
            `Remark` = #Remark#,
            `UpdateDate` = GetDate()

            WHERE `Id` = #Id#
            END
            ELSE
            BEGIN
            INSERT INTO `tb_StandardRole` (
            `Id`,
            `Code`,
            `Name`,
            `Type`,
            `ParentId`,
            `StandardOrganizationId`,
            `IsKey`,
            `GroupTreeNodeId`,
            `OrderId`,
            `Status`,
            `Remark`,
            `UpdateDate`,
            `CreateDate`
            )
            VALUES
            (
            #Id#,
            #Code#,
            #Name#,
            #Type#,
            #ParentId#,
            #StandardOrganizationId#,
            #IsKey#,
            #GroupTreeNodeId#,
            #OrderId#,
            #Status#,
            #Remark#,
            GetDate(),
            GetDate()
            )
            END
        </insert>
    </statements>
</sqlMap>
