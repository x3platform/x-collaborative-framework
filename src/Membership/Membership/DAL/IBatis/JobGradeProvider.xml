<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="X3Platform.Membership.DAL.IBatis.JobGradeProvider" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
    <alias>
        <typeAlias alias="JobGradeInfo" type="X3Platform.Membership.Model.JobGradeInfo,X3Platform.Membership" />
    </alias>
    <resultMaps>
        <resultMap id="proc_JobGrade_FindOne_Result" class="JobGradeInfo">
            <result property="Id" column="Id" />
            <result property="JobFamilyId" column="JobFamilyId" />
            <result property="Name" column="Name" />
            <result property="Description" column="Description" />
            <result property="Value" column="Value" />
            <result property="Locking" column="Locking" />
            <result property="OrderId" column="OrderId" />
            <result property="Status" column="Status" />
            <result property="Remark" column="Remark" />
            <result property="UpdateDate" column="UpdateDate" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
        <resultMap id="proc_JobGrade_FindAll_Result" class="JobGradeInfo">
            <result property="Id" column="Id" />
            <result property="JobFamilyId" column="JobFamilyId" />
            <result property="Name" column="Name" />
            <result property="Description" column="Description" />
            <result property="Value" column="Value" />
            <result property="Locking" column="Locking" />
            <result property="OrderId" column="OrderId" />
            <result property="Status" column="Status" />
            <result property="Remark" column="Remark" />
            <result property="UpdateDate" column="UpdateDate" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
    </resultMaps>
    <statements>

        <insert id="proc_JobGrade_Insert" parameterClass="JobGradeInfo">
            INSERT INTO tb_JobGrade 
            (
                Id,
                JobFamilyId,
                Name,
                Value,
                Locking,
                OrderId,
                Status,
                Remark,
                UpdateDate,
                CreateDate
            )
            VALUES
            (
                #Id#,
                #JobFamilyId#,
                #Name#,
                #Value#,
                #Locking#,
                #OrderId#,
                #Status#,
                #Remark#,
                CURRENT_TIMESTAMP,
                CURRENT_TIMESTAMP
            )
        </insert>

        <update id="proc_JobGrade_Update" parameterClass="JobGradeInfo">
            UPDATE tb_JobGrade SET
                
                JobFamilyId = #JobFamilyId#,
                Name = #Name#,
                Value = #Value#,
                Locking = #Locking#,
                OrderId = #OrderId#,
                Status = #Status#,
                Remark = #Remark#,
                UpdateDate = CURRENT_TIMESTAMP

            WHERE Id = #Id#
        </update>

        <delete id="proc_JobGrade_Delete" >
            DELETE FROM tb_JobGrade WHERE $WhereClause$
        </delete>

        <select id="proc_JobGrade_FindOne" resultMap="proc_JobGrade_FindOne_Result" >
            SELECT * FROM tb_JobGrade WHERE Id = #Id#
        </select>

        <select id="proc_JobGrade_FindAll#MySql" resultMap="proc_JobGrade_FindAll_Result" >
            SELECT * FROM tb_JobGrade T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
            
            <dynamic prepend="LIMIT">
                <isNotEqual prepend="LIMIT" property="Length" compareValue = "0">
                    0,$Length$
                </isNotEqual>
            </dynamic>
        </select>
	
        <select id="proc_JobGrade_FindAll#SqlServer" resultMap="proc_JobGrade_FindAll_Result" >
            SELECT

            <dynamic prepend="TOP">
                <isNotEqual prepend="TOP" property="Length" compareValue = "0">
                    $Length$
                </isNotEqual>
            </dynamic>

            * FROM tb_JobGrade T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>

        <select id="proc_JobGrade_GetPaging#MySql" resultMap="proc_JobGrade_FindAll_Result" >
            SELECT * FROM tb_JobGrade T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>

            ORDER BY $OrderBy$
            
            LIMIT $StartIndex$, $PageSize$
        </select>

        <select id="proc_JobGrade_GetPaging#SqlServer" resultMap="proc_JobGrade_FindAll_Result" >
            SELECT *

            FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

            FROM tb_JobGrade T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>) TableIndex

            WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$
        </select>

        <select id="proc_JobGrade_GetRowCount" >
            SELECT COUNT(*) AS 'RowCount' FROM tb_JobGrade T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>

        <select id="proc_JobGrade_IsExist" >
            SELECT COUNT(0) AS 'Count' FROM tb_JobGrade T WHERE $WhereClause$
        </select>

        <update id="proc_JobGrade_Rename" parameterClass="JobGradeInfo">
            UPDATE tb_JobGrade SET Name = #Name#, UpdateDate = CURRENT_TIMESTAMP WHERE Id = #Id#
        </update>

        <insert id="proc_JobGrade_SyncFromPackPage" parameterClass="JobGradeInfo" >
            IF EXISTS(SELECT 0 FROM tb_JobGrade WHERE Id = #Id#)
            BEGIN
                UPDATE tb_JobGrade SET
                    
                    JobFamilyId = #JobFamilyId#,
                    Name = #Name#,
                    Value = #Value#,
                    OrderId = #OrderId#,
                    Status = #Status#,
                    Remark = #Remark#,
                    UpdateDate = CURRENT_TIMESTAMP

                WHERE Id = #Id#
            END
            ELSE
            BEGIN
                INSERT INTO tb_JobGrade 
                (
                    Id,
                    JobFamilyId,
                    Name,
                    Value,
                    OrderId,
                    Status,
                    Remark,
                    UpdateDate,
                    CreateDate
                )
                VALUES
                (
                    #Id#,
                    #JobFamilyId#,
                    #Name#,
                    #Value#,
                    #OrderId#,
                    #Status#,
                    #Remark#,
                    CURRENT_TIMESTAMP,
                    CURRENT_TIMESTAMP
                )
            END
        </insert>

    </statements>
</sqlMap>
