<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="X3Platform.Membership.DAL.IBatis.AccountGrantProvider" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
    <alias>
        <typeAlias alias="AccountGrantInfo" type="X3Platform.Membership.Model.AccountGrantInfo,X3Platform.Membership" />
    </alias>
    <resultMaps>
        <resultMap id="proc_Account_Grant_FindOne_Result" class="AccountGrantInfo">
            <result property="Id" column="Id" />
            <result property="Code" column="Code" />
            <result property="GrantorId" column="GrantorId" />
            <result property="GranteeId" column="GranteeId" />
            <result property="GrantedTimeFrom" column="GrantedTimeFrom" />
            <result property="GrantedTimeTo" column="GrantedTimeTo" />
            <result property="WorkflowGrantMode" column="WorkflowGrantMode" />
            <result property="DataQueryGrantMode" column="DataQueryGrantMode" />
            <result property="IsAborted" column="IsAborted" />
            <result property="ApprovedUrl" column="ApprovedUrl" />
            <result property="Status" column="Status" />
            <result property="Remark" column="Remark" />
            <result property="UpdateDate" column="UpdateDate" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
        <resultMap id="proc_Account_Grant_FindAll_Result" class="AccountGrantInfo">
            <result property="Id" column="Id" />
            <result property="Code" column="Code" />
            <result property="GrantorId" column="GrantorId" />
            <result property="GranteeId" column="GranteeId" />
            <result property="GrantedTimeFrom" column="GrantedTimeFrom" />
            <result property="GrantedTimeTo" column="GrantedTimeTo" />
            <result property="WorkflowGrantMode" column="WorkflowGrantMode" />
            <result property="DataQueryGrantMode" column="DataQueryGrantMode" />
            <result property="IsAborted" column="IsAborted" />
            <result property="ApprovedUrl" column="ApprovedUrl" />
            <result property="Status" column="Status" />
            <result property="Remark" column="Remark" />
            <result property="UpdateDate" column="UpdateDate" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
    </resultMaps>
    <statements>
        <insert id="proc_Account_Grant_Insert" parameterClass="AccountGrantInfo">
            INSERT INTO tb_Account_Grant 
            (
                Id,
                Code,
                GrantorId,
                GranteeId,
                GrantedTimeFrom,
                GrantedTimeTo,
                WorkflowGrantMode,
                DataQueryGrantMode,
                IsAborted,
                ApprovedUrl,
                Status,
                Remark,
                UpdateDate,
                CreateDate
            )
            VALUES
            (
                #Id#,
                #Code#,
                #GrantorId#,
                #GranteeId#,
                #GrantedTimeFrom#,
                #GrantedTimeTo#,
                #WorkflowGrantMode#,
                #DataQueryGrantMode#,
                #IsAborted#,
                #ApprovedUrl#,
                #Status#,
                #Remark#,
                CURRENT_TIMESTAMP,
                CURRENT_TIMESTAMP
            )
        </insert>

        <update id="proc_Account_Grant_Update" parameterClass="AccountGrantInfo">
            UPDATE tb_Account_Grant SET

                Code = #Code#,
                GrantorId = #GrantorId#,
                GranteeId = #GranteeId#,
                GrantedTimeFrom = #GrantedTimeFrom#,
                GrantedTimeTo = #GrantedTimeTo#,
                WorkflowGrantMode = #WorkflowGrantMode#,
                DataQueryGrantMode = #DataQueryGrantMode#,
                IsAborted = #IsAborted#,
                ApprovedUrl = #ApprovedUrl#,
                Status = #Status#,
                Remark = #Remark#,
                UpdateDate = CURRENT_TIMESTAMP

            WHERE Id = #Id#
        </update>
        <delete id="proc_Account_Grant_Delete" parameterClass="AccountGrantInfo">
            DELETE FROM tb_Account_Grant WHERE $WhereClause$
        </delete>
        <select id="proc_Account_Grant_FindOne" resultMap="proc_Account_Grant_FindOne_Result" >
            SELECT * FROM tb_Account_Grant WHERE Id = #Id#
        </select>
        <select id="proc_Account_Grant_FindAll#MySql" resultMap="proc_Account_Grant_FindAll_Result" >
            SELECT * FROM tb_Account_Grant T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
            
            <dynamic prepend="LIMIT">
                <isNotEqual prepend="LIMIT" property="Length" compareValue = "0">
                    0,$Length$
                </isNotEqual>
            </dynamic>
        </select>
        <select id="proc_Account_Grant_FindAll#SqlServer" resultMap="proc_Account_Grant_FindAll_Result" >
            SELECT

            <dynamic prepend="TOP">
                <isNotEqual prepend="TOP" property="Length" compareValue = "0">
                    $Length$
                </isNotEqual>
            </dynamic>

            * FROM tb_Account_Grant

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>
        <select id="proc_Account_Grant_GetPaging#MySql" resultMap="proc_Account_Grant_FindAll_Result" >
            SELECT * FROM tb_Account_Grant T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>

            ORDER BY $OrderBy$
            
            LIMIT $StartIndex$, $PageSize$
        </select>
        <select id="proc_Account_Grant_GetPaging#SqlServer" resultMap="proc_Account_Grant_FindAll_Result" >
            SELECT *

            FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

            FROM tb_Account_Grant T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>) TableIndex
            
            WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$
        </select>
        <select id="proc_Account_Grant_GetRowCount" >
            SELECT COUNT(*) AS 'RowCount' FROM tb_Account_Grant T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>
        <select id="proc_Account_Grant_IsExist" >
            SELECT COUNT(0) AS 'Count' FROM tb_Account_Grant T WHERE $WhereClause$
        </select>
        <update id="proc_Account_Grant_Abort" parameterClass="AccountGrantInfo">
            UPDATE tb_Account_Grant SET

                IsAborted = 1,
                GrantedTimeTo = CURRENT_TIMESTAMP,
                UpdateDate = CURRENT_TIMESTAMP

            WHERE Id = #Id#
        </update>
        <insert id="proc_Account_Grant_SyncFromPackPage" parameterClass="AccountGrantInfo" >
            IF EXISTS ( SELECT 0 FROM tb_Account_Grant WHERE Id = #Id# )
            BEGIN
                UPDATE tb_Account_Grant SET

                Code = #Code#,
                GrantorId = #GrantorId#,
                GranteeId = #GranteeId#,
                GrantedTimeFrom = #GrantedTimeFrom#,
                GrantedTimeTo = #GrantedTimeTo#,
                WorkflowGrantMode = #WorkflowGrantMode#,
                DataQueryGrantMode = #DataQueryGrantMode#,
                IsAborted = #IsAborted#,
                Status = #Status#,
                Remark = #Remark#,
                UpdateDate = CURRENT_TIMESTAMP

                WHERE Id = #Id#

            END
            ELSE
            BEGIN

                INSERT INTO tb_Account_Grant (
                    Id,
                    Code,
                    GrantorId,
                    GranteeId,
                    GrantedTimeFrom,
                    GrantedTimeTo,
                    WorkflowGrantMode,
                    DataQueryGrantMode,
                    IsAborted,
                    ApprovedUrl,
                    Status,
                    Remark,
                    UpdateDate,
                    CreateDate
                )
                VALUES
                (
                    #Id#,
                    #Code#,
                    #GrantorId#,
                    #GranteeId#,
                    #GrantedTimeFrom#,
                    #GrantedTimeTo#,
                    #WorkflowGrantMode#,
                    #DataQueryGrantMode#,
                    #IsAborted#,
                    #ApprovedUrl#,
                    #Status#,
                    #Remark#,
                    CURRENT_TIMESTAMP,
                    CURRENT_TIMESTAMP
                )

            END
        </insert>
    </statements>
</sqlMap>
