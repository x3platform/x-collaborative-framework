<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="X3Platform.Membership.DAL.IBatis.GroupTreeNodeProvider" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
    <alias>
        <typeAlias alias="GroupTreeNodeInfo" type="X3Platform.Membership.Model.GroupTreeNodeInfo,X3Platform.Membership" />
    </alias>
    <resultMaps>
        <resultMap id="proc_GroupTreeNode_FindOne_Result" class="GroupTreeNodeInfo">
            <result property="Id" column="Id" />
            <result property="ParentId" column="ParentId" />
            <result property="Name" column="Name" />
            <result property="IsKey" column="IsKey" />
            <result property="OrderId" column="OrderId" />
            <result property="Remark" column="Remark" />
            <result property="Status" column="Status" />
            <result property="UpdateDate" column="UpdateDate" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
        <resultMap id="proc_GroupTreeNode_FindAll_Result" class="GroupTreeNodeInfo">
            <result property="Id" column="Id" />
            <result property="ParentId" column="ParentId" />
            <result property="Name" column="Name" />
            <result property="IsKey" column="IsKey" />
            <result property="OrderId" column="OrderId" />
            <result property="Remark" column="Remark" />
            <result property="Status" column="Status" />
            <result property="UpdateDate" column="UpdateDate" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
    </resultMaps>
    <statements>

        <insert id="proc_GroupTreeNode_Insert" parameterClass="GroupTreeNodeInfo">
            INSERT INTO tb_GroupTreeNode 
            (
                Id,
                ParentId,
                Name,
                IsKey,
                OrderId,
                Remark,
                Status,
                UpdateDate,
                CreateDate
            )
            VALUES
            (
                #Id#,
                #ParentId#,
                #Name#,
                #IsKey#,
                #OrderId#,
                #Remark#,
                #Status#,
                CURRENT_TIMESTAMP,
                CURRENT_TIMESTAMP
            )
        </insert>

        <update id="proc_GroupTreeNode_Update" parameterClass="GroupTreeNodeInfo">
            UPDATE tb_GroupTreeNode SET

                ParentId = #ParentId#,
                Name = #Name#,
                IsKey = #IsKey#,
                OrderId = #OrderId#,
                Remark = #Remark#,
                Status = #Status#,
                UpdateDate = CURRENT_TIMESTAMP

            WHERE Id = #Id#
        </update>

        <delete id="proc_GroupTreeNode_Delete" parameterClass="GroupTreeNodeInfo">
            DELETE FROM tb_GroupTreeNode WHERE $WhereClause$
        </delete>

        <select id="proc_GroupTreeNode_FindOne" resultMap="proc_GroupTreeNode_FindOne_Result" >
            SELECT * FROM tb_GroupTreeNode T WHERE Id = #Id#
        </select>

        <select id="proc_GroupTreeNode_FindAll" resultMap="proc_GroupTreeNode_FindAll_Result" >
            SELECT

            <dynamic prepend="TOP">
                <isNotEqual prepend="TOP" property="Length" compareValue = "0">
                    $Length$
                </isNotEqual>
            </dynamic>

            * FROM tb_GroupTreeNode T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>

        <select id="proc_GroupTreeNode_GetPages" resultMap="proc_GroupTreeNode_FindAll_Result" >
            SELECT *

            FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

            FROM tb_GroupTreeNode T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>) TableIndex

            WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$

        </select>

        <select id="proc_GroupTreeNode_GetRowCount" >

            SELECT COUNT(*) AS 'RowCount' FROM tb_GroupTreeNode T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>

        <select id="proc_GroupTreeNode_IsExist" >
            SELECT COUNT(0) AS 'Count' FROM tb_GroupTreeNode T WHERE $WhereClause$
        </select>

    </statements>
</sqlMap>
