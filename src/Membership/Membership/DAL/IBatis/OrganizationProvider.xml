<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="X3Platform.Membership.DAL.IBatis.OrganizationProvider" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
    <alias>
        <typeAlias alias="OrganizationInfo" type="X3Platform.Membership.Model.OrganizationInfo,X3Platform.Membership" />
        <typeAlias alias="AccountOrganizationRelationInfo" type="X3Platform.Membership.Model.AccountOrganizationRelationInfo,X3Platform.Membership" />
    </alias>
    <resultMaps>
        <resultMap id="proc_Organization_FindOne_Result" class="OrganizationInfo">
            <result property="Id" column="Id" />
            <result property="Code" column="Code" />
            <result property="Name" column="Name" />
            <result property="GlobalName" column="GlobalName" />
            <result property="FullName" column="FullName" />
            <result property="PinYin" column="PinYin" />
            <result property="Type" column="Type" />
            <result property="Level" column="Level" />
            <result property="ParentId" column="ParentId" />
            <result property="StandardOrganizationId" column="StandardOrganizationId" />
            <result property="EnableExchangeEmail" column="EnableExchangeEmail" />
            <result property="EffectScope" column="EffectScope" />
            <result property="Locking" column="Locking" />
            <result property="OrderId" column="OrderId" />
            <result property="Status" column="Status" />
            <result property="Remark" column="Remark" />
            <result property="FullPath" column="FullPath" />
            <result property="DistinguishedName" column="DistinguishedName" />
            <result property="UpdateDate" column="UpdateDate" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
        <resultMap id="proc_Organization_FindAll_Result" class="OrganizationInfo" >
            <result property="Id" column="Id" />
            <result property="Code" column="Code" />
            <result property="Name" column="Name" />
            <result property="GlobalName" column="GlobalName" />
            <result property="FullName" column="FullName" />
            <result property="PinYin" column="PinYin" />
            <result property="Type" column="Type" />
            <result property="Level" column="Level" />
            <result property="ParentId" column="ParentId" />
            <result property="StandardOrganizationId" column="StandardOrganizationId" />
            <result property="EnableExchangeEmail" column="EnableExchangeEmail" />
            <result property="EffectScope" column="EffectScope" />
            <result property="Locking" column="Locking" />
            <result property="OrderId" column="OrderId" />
            <result property="Status" column="Status" />
            <result property="Remark" column="Remark" />
            <result property="FullPath" column="FullPath" />
            <result property="DistinguishedName" column="DistinguishedName" />
            <result property="UpdateDate" column="UpdateDate" />
            <result property="CreateDate" column="CreateDate" />
        </resultMap>
        <resultMap id="proc_Organization_FindAllRelation_Result" class="AccountOrganizationRelationInfo" >
            <result property="AccountId" column="AccountId" />
            <result property="AccountGlobalName" column="AccountGlobalName" />
            <result property="OrganizationId" column="OrganizationId" />
            <result property="OrganizationGlobalName" column="OrganizationGlobalName" />
            <result property="IsDefault" column="IsDefault" />
            <result property="BeginDate" column="BeginDate" />
            <result property="EndDate" column="EndDate" />
        </resultMap>
    </resultMaps>

    <statements>

        <insert id="proc_Organization_Insert" parameterClass="OrganizationInfo" >
            INSERT INTO tb_Organization 
            (
                Id,
                Code,
                Name,
                GlobalName,
                FullName,
                PinYin,
                Type,
                ParentId,
                StandardOrganizationId,
                EnableExchangeEmail,
                EffectScope,
                Locking,
                OrderId,
                Status,
                Remark,
                FullPath,
                DistinguishedName,
                UpdateDate,
                CreateDate
            )
            VALUES 
            (
                #Id#,
                #Code#,
                #Name#,
                #GlobalName#,
                #FullName#,
                #PinYin#,
                #Type#,
                #ParentId#,
                #StandardOrganizationId#,
                #EnableExchangeEmail#,
                #EffectScope#,
                #Locking#,
                #OrderId#,
                #Status#,
                #Remark#,
                #FullPath#,
                #DistinguishedName#,
                CURRENT_TIMESTAMP,
                CURRENT_TIMESTAMP
            )
        </insert>

        <update id="proc_Organization_Update" parameterClass="OrganizationInfo" >
            UPDATE tb_Organization SET

                Code = #Code#,
                Name = #Name#,
                GlobalName = #GlobalName#,
                FullName = #FullName#,
                PinYin = #PinYin#,
                Type = #Type#,
                Level = #Level#,
                ParentId = #ParentId#,
                StandardOrganizationId = #StandardOrganizationId#,
                EnableExchangeEmail = #EnableExchangeEmail#,
                EffectScope = #EffectScope#,
                Locking = #Locking#,
                OrderId = #OrderId#,
                Status = #Status#,
                Remark = #Remark#,
                FullPath = #FullPath#,
                DistinguishedName = #DistinguishedName#,
                UpdateDate = CURRENT_TIMESTAMP

            WHERE Id = #Id#
        </update>
        <delete id="proc_Organization_Delete">
            DELETE FROM tb_Organization WHERE $WhereClause$
        </delete>
        <select id="proc_Organization_FindOne" parameterClass="OrganizationInfo" resultMap="proc_Organization_FindOne_Result" >
            SELECT * FROM tb_Organization WHERE Id = #Id#
        </select>
        <select id="proc_Organization_FindOneByRoleId#MySql" resultMap="proc_Organization_FindOne_Result" >
            SELECT * FROM tb_Organization WHERE Id IN ( SELECT func_GetDepartmentIdByOrganizationId( OrganizationId , $Level$ ) FROM tb_Role WHERE Id = '$RoleId$' ) LIMIT 0,1
        </select>
        <select id="proc_Organization_FindOneByRoleId#SqlServer" resultMap="proc_Organization_FindOne_Result" >
            SELECT TOP 1 * FROM tb_Organization WHERE Id IN ( SELECT dbo.func_GetDepartmentIdByOrganizationId( OrganizationId , $Level$ ) FROM tb_Role WHERE Id = '$RoleId$' )
        </select>
        <select id="proc_Organization_FindCorporationByOrganizationId#MySql" resultMap="proc_Organization_FindOne_Result" >
            SELECT * FROM tb_Organization WHERE Id IN ( func_GetCorporationIdByOrganizationId(#OrganizationId#) )  
        </select>
        <select id="proc_Organization_FindCorporationByOrganizationId#SqlServer" resultMap="proc_Organization_FindOne_Result" >
            SELECT * FROM tb_Organization WHERE Id IN ( dbo.func_GetCorporationIdByOrganizationId(#OrganizationId#) )  
        </select>
        <select id="proc_Organization_FindDepartmentByOrganizationId#MySql" resultMap="proc_Organization_FindOne_Result" >
            SELECT * FROM tb_Organization WHERE Id IN ( func_GetDepartmentIdByOrganizationId(#OrganizationId#,#Level#) )  
        </select>
        <select id="proc_Organization_FindDepartmentByOrganizationId#SqlServer" resultMap="proc_Organization_FindOne_Result" >
            SELECT * FROM tb_Organization WHERE Id IN ( dbo.func_GetDepartmentIdByOrganizationId(#OrganizationId#,#Level#) )
        </select>
        <select id="proc_Organization_FindAll#MySql" parameterClass="OrganizationInfo" resultMap="proc_Organization_FindAll_Result" >
            SELECT * FROM tb_Organization T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
            
            <dynamic prepend="LIMIT">
                <isNotEqual prepend="LIMIT" property="Length" compareValue = "0">
                    0,$Length$
                </isNotEqual>
            </dynamic>
        </select>
        <select id="proc_Organization_FindAll#SqlServer" parameterClass="OrganizationInfo" resultMap="proc_Organization_FindAll_Result" >
            SELECT

            <dynamic prepend="TOP">
                <isNotEqual prepend="TOP" property="Length" compareValue = "0">
                    $Length$
                </isNotEqual>
            </dynamic>

            * FROM tb_Organization T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>
        <select id="proc_Organization_GetPaging#MySql" resultMap="proc_Organization_FindAll_Result" >
            SELECT * FROM tb_Organization T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>

            ORDER BY $OrderBy$
            
            LIMIT $StartIndex$, $PageSize$
        </select>

        <select id="proc_Organization_GetPaging#SqlServer" resultMap="proc_Organization_FindAll_Result" >
            SELECT *

            FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

            FROM tb_Organization T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>) TableIndex

            WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$
        </select>
        <select id="proc_Organization_GetRowCount" >

            SELECT COUNT(*) AS 'RowCount' FROM tb_Organization T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>
        <select id="proc_Organization_IsExist" >
            SELECT COUNT(*) AS 'Count' FROM tb_Organization T WHERE $WhereClause$
        </select>
        <update id="proc_Organization_Rename" parameterClass="OrganizationInfo">
            UPDATE tb_Organization SET Name = #Name#, UpdateDate = CURRENT_TIMESTAMP WHERE Id = #Id#
        </update>

        <update id="proc_Organization_SetGlobalName" >
            Update tb_Organization SET GlobalName = #GlobalName#, UpdateDate = CURRENT_TIMESTAMP WHERE Id = #Id#
        </update>

        <update id="proc_Organization_SetParentId" >
            UPDATE tb_Organization SET ParentId = #ParentId#, UpdateDate = CURRENT_TIMESTAMP WHERE Id = #Id#
        </update>

        <update id="proc_Organization_SetExchangeStatus" >
            UPDATE tb_Organization SET EnableExchangeEmail = #EnableExchangeEmail#, UpdateDate = CURRENT_TIMESTAMP WHERE Id = #Id#
        </update>

        <insert id="proc_Organization_SyncFromPackPage" parameterClass="OrganizationInfo" >
            IF EXISTS(SELECT 0 FROM tb_Organization WHERE Id = #Id#)
            BEGIN
                UPDATE tb_Organization SET

                    Code = #Code#,
                    Name = #Name#,
                    Type = #Type#,
                    ParentId = #ParentId#,
                    OrderId = #OrderId#,
                    Status = #Status#,
                    Remark = #Remark#,
                    UpdateDate = CURRENT_TIMESTAMP

                WHERE Id = #Id#

            END
            ELSE
            BEGIN

                INSERT INTO tb_Organization 
                (
                    Id,
                    Code,
                    Name,
                    Type,
                    ParentId,
                    OrderId,
                    Status,
                    Remark,
                    UpdateDate,
                    CreateDate
                )
                VALUES 
                (
                    #Id#,
                    #Code#,
                    #Name#,
                    #Type#,
                    #ParentId#,
                    #OrderId#,
                    #Status#,
                    #Remark#,
                    CURRENT_TIMESTAMP,
                    CURRENT_TIMESTAMP
                )
            END
        </insert>
        <select id="proc_Organization_FindAllRelation" resultMap="proc_Organization_FindAllRelation_Result" >
            SELECT 
	            AccountId, 
	            tb_Account.GlobalName AS AccountGlobalName, 
	            OrganizationId,
	            tb_Organization.GlobalName AS OrganizationGlobalName, 
	            IsDefault, 
	            BeginDate,
	            EndDate 
            FROM 
	            tb_Account_Organization
		            INNER JOIN tb_Account ON tb_Account_Organization.AccountId = tb_Account.Id
		            INNER JOIN tb_Organization ON tb_Account_Organization.OrganizationId = tb_Organization.Id
            WHERE 
                $WhereClause$
        </select>
        <insert id="proc_Organization_AddRelation#MySql" parameterClass="AccountOrganizationRelationInfo" >
            INSERT INTO tb_Account_Organization
            (
                AccountId,
                OrganizationId,
                IsDefault,
                BeginDate,
                EndDate
            )
            VALUES
            (
                #AccountId#,
                #OrganizationId#,
                #IsDefault#,
                #BeginDate#,
                #EndDate#
            ) 
            ON DUPLICATE KEY UPDATE 
                IsDefault = #IsDefault#,
                BeginDate = #BeginDate#,
                EndDate = #EndDate#
        </insert>
        <insert id="proc_Organization_AddRelation#SqlServer" parameterClass="AccountOrganizationRelationInfo" >
            IF EXISTS ( SELECT 0 FROM tb_Account_Organization WHERE AccountId = '$AccountId$' AND OrganizationId = '$OrganizationId$' )
            BEGIN
                UPDATE tb_Account_Organization SET

                    IsDefault = '$IsDefault$',
                    BeginDate = '$BeginDate$',
                    EndDate = '$EndDate$'

                WHERE AccountId = '$AccountId$' AND OrganizationId = '$OrganizationId$'
            END
            ELSE
            BEGIN
                INSERT INTO tb_Account_Organization 
                (
                    AccountId,
                    OrganizationId,
                    IsDefault,
                    BeginDate,
                    EndDate
                )
                VALUES
                (
                    '$AccountId$',
                    '$OrganizationId$',
                    '$IsDefault$',
                    '$BeginDate$',
                    '$EndDate$'
                )
            END
        </insert>
        <update id="proc_Organization_ExtendRelation" >
            UPDATE tb_Account_Organization SET EndDate = '$EndDate$' WHERE AccountId = '$AccountId$' AND OrganizationId = '$OrganizationId$'
        </update>
        <delete id="proc_Organization_RemoveRelation" >
            DELETE FROM tb_Account_Organization WHERE $WhereClause$
        </delete>
        <select id="proc_Organization_HasDefaultRelation" >
            SELECT COUNT(0) AS 'Count' FROM tb_Account_Organization T WHERE AccountId = '$AccountId$' AND IsDefault = 1
        </select>
        <update id="proc_Organization_ResetRelation" >
            UPDATE tb_Account_Organization SET IsDefault = 0 WHERE AccountId = '$AccountId$'
        </update>
        <update id="proc_Organization_SetDefaultRelationIsDefault" >
            UPDATE tb_Account_Organization SET IsDefault = 1 WHERE AccountId = '$AccountId$' AND OrganizationId = '$RoleId$'
        </update>
        <update id="proc_Organization_SetDefaultRelation" >
            UPDATE tb_Member SET OrganizationId = '$OrganizationId$', UpdateDate = CURRENT_TIMESTAMP WHERE AccountId = '$AccountId$'
        </update>
        <update id="proc_Organization_SetNullDefaultRelation" >
            UPDATE tb_Member SET RoleId = '', UpdateDate = CURRENT_TIMESTAMP WHERE AccountId = '$AccountId$'
        </update>
    </statements>
</sqlMap>