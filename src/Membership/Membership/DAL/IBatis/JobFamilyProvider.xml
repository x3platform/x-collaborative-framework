<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="X3Platform.Membership.DAL.IBatis.JobFamilyProvider" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
    <alias>
        <typeAlias alias="JobFamilyInfo" type="X3Platform.Membership.Model.JobFamilyInfo,X3Platform.Membership" />
    </alias>
    <resultMaps>
        <resultMap id="proc_JobFamily_FindOne_Result" class="JobFamilyInfo">
            <result property="Id" column="Id" />
            <result property="Name" column="Name" />
            <result property="Description" column="Description" />
            <result property="Locking" column="Locking" />
            <result property="OrderId" column="OrderId" />
            <result property="Status" column="Status" />
            <result property="Remark" column="Remark" />
            <result property="ModifiedDate" column="ModifiedDate" />
            <result property="CreatedDate" column="CreatedDate" />
        </resultMap>
        <resultMap id="proc_JobFamily_FindAll_Result" class="JobFamilyInfo">
            <result property="Id" column="Id" />
            <result property="Name" column="Name" />
            <result property="Description" column="Description" />
            <result property="Locking" column="Locking" />
            <result property="OrderId" column="OrderId" />
            <result property="Status" column="Status" />
            <result property="Remark" column="Remark" />
            <result property="ModifiedDate" column="ModifiedDate" />
            <result property="CreatedDate" column="CreatedDate" />
        </resultMap>
    </resultMaps>
    <statements>

        <insert id="proc_JobFamily_Insert" parameterClass="JobFamilyInfo">
            INSERT INTO tb_JobFamily 
            (
                Id,
                Name,
                Description,
                Locking,
                OrderId,
                Status,
                Remark,
                ModifiedDate,
                CreatedDate
            )
            VALUES
            (
                #Id#,
                #Name#,
                #Description#,
                #Locking#,
                #OrderId#,
                #Status#,
                #Remark#,
                CURRENT_TIMESTAMP,
                CURRENT_TIMESTAMP
            )
        </insert>

        <update id="proc_JobFamily_Update" parameterClass="JobFamilyInfo">
            UPDATE tb_JobFamily SET

                Name = #Name#,
                Description = #Description#,
                Locking = #Locking#,
                OrderId = #OrderId#,
                Status = #Status#,
                Remark = #Remark#,
                ModifiedDate = CURRENT_TIMESTAMP

            WHERE Id = #Id#
        </update>

        <delete id="proc_JobFamily_Delete" >
            DELETE FROM tb_JobFamily WHERE $WhereClause$
        </delete>

        <select id="proc_JobFamily_FindOne" resultMap="proc_JobFamily_FindOne_Result" >
            SELECT * FROM tb_JobFamily WHERE Id = #Id#
        </select>

        <select id="proc_JobFamily_FindAll#MySql" resultMap="proc_JobFamily_FindAll_Result" >
            SELECT * FROM tb_JobFamily T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
            
            <dynamic prepend="LIMIT">
                <isNotEqual prepend="LIMIT" property="Length" compareValue = "0">
                    0,$Length$
                </isNotEqual>
            </dynamic>
        </select>
	
        <select id="proc_JobFamily_FindAll#SqlServer" resultMap="proc_JobFamily_FindAll_Result" >
            SELECT

            <dynamic prepend="TOP">
                <isNotEqual prepend="TOP" property="Length" compareValue = "0">
                    $Length$
                </isNotEqual>
            </dynamic>

            * FROM tb_JobFamily T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>

        <select id="proc_JobFamily_GetPaging#MySql" resultMap="proc_JobFamily_FindAll_Result" >
            SELECT * FROM tb_JobFamily T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>

            ORDER BY $OrderBy$
            
            LIMIT $StartIndex$, $PageSize$
        </select>

        <select id="proc_JobFamily_GetPaging#SqlServer" resultMap="proc_JobFamily_FindAll_Result" >
            SELECT *

            FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

            FROM tb_JobFamily T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>) TableIndex

            WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$
        </select>

        <select id="proc_JobFamily_GetRowCount" >
            SELECT COUNT(*) AS 'RowCount' FROM tb_JobFamily T

            <dynamic prepend="WHERE">
                <isParameterPresent>
                    <isNotEmpty prepend="AND" property="WhereClause" >
                        $WhereClause$
                    </isNotEmpty>
                </isParameterPresent>
            </dynamic>
        </select>

        <select id="proc_JobFamily_IsExist" >
            SELECT COUNT(0) AS 'Count' FROM tb_JobFamily T WHERE $WhereClause$
        </select>

        <update id="proc_JobFamily_Rename" parameterClass="JobFamilyInfo">
            UPDATE tb_JobFamily SET Name = #Name#, ModifiedDate = CURRENT_TIMESTAMP WHERE Id = #Id#
        </update>

        <insert id="proc_JobFamily_SyncFromPackPage" parameterClass="JobFamilyInfo" >
            IF EXISTS(SELECT 0 FROM tb_JobFamily WHERE Id = #Id#)
            BEGIN
                UPDATE tb_JobFamily SET

                    Name = #Name#,
                    Description = #Description#,
                    OrderId = #OrderId#,
                    Status = #Status#,
                    Remark = #Remark#,
                    ModifiedDate = CURRENT_TIMESTAMP

                WHERE Id = #Id#
            END
            ELSE
            BEGIN
                INSERT INTO tb_JobFamily 
                (
                    Id,
                    Name,
                    Description,
                    OrderId,
                    Status,
                    Remark,
                    ModifiedDate,
                    CreatedDate
                )
                VALUES
                (
                    #Id#,
                    #Name#,
                    #Description#,
                    #OrderId#,
                    #Status#,
                    #Remark#,
                    CURRENT_TIMESTAMP,
                    CURRENT_TIMESTAMP
                )
            END
        </insert>
    </statements>
</sqlMap>
