<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="X3Platform.Membership.DAL.IBatis.AuthorizationObjectProvider" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
  <statements>
    <select id="proc_AuthObject_Filter" >
      SELECT *

      FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

      FROM view_AuthObject_Account T

      <dynamic prepend="WHERE">
        <isParameterPresent>
          <isNotEmpty prepend="AND" property="WhereClause" >
            $WhereClause$
          </isNotEmpty>
        </isParameterPresent>
      </dynamic>) TableIndex

      WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$
    </select>
    <select id="proc_AuthObject_FilterRowCount" >
      SELECT COUNT(0) AS "RowCount" FROM view_AuthObject_Account T

      <dynamic prepend="WHERE">
        <isParameterPresent>
          <isNotEmpty prepend="AND" property="WhereClause" >
            $WhereClause$
          </isNotEmpty>
        </isParameterPresent>
      </dynamic>
    </select>
    <select id="proc_AuthObject_HasAuthority" >
      SELECT COUNT(*) AS 'Count'
        FROM $ScopeTableName$
       WHERE EntityId = '$EntityId$'
         AND EntityClassName = '$EntityClassName$'
         AND AuthorityId = '$AuthorityId$'
         AND View1.AuthorizationObjectType = '$AuthorizationObjectType$'
         AND AuthorizationObjectId = '$AuthorizationObjectId$'
    </select>
    <select id="proc_AuthObject_HasAuthorityWithAccount" >
      SELECT COUNT(*) AS 'Count'
        FROM $ScopeTableName$ LEFT JOIN view_AuthObject_Account ON (
             view_AuthObject_Account.AuthorizationObjectType = $ScopeTableName$.AuthorizationObjectType
             AND view_AuthObject_Account.AuthorizationObjectId = $ScopeTableName$.AuthorizationObjectId
             AND view_AuthObject_Account.AccountId = '$AuthorizationObjectId$')
       WHERE EntityId = '$EntityId$'
         AND EntityClassName = '$EntityClassName$'
         AND AuthorityId = '$AuthorityId$'
    </select>
    <insert id="proc_AuthObject_AddAuthorizationScopeObject#MySql">
      INSERT INTO $ScopeTableName$
      (
        EntityId,
        EntityClassName,
        AuthorityId,
        AuthorizationObjectType,
        AuthorizationObjectId
      )
      SELECT
        '$EntityId$',
        '$EntityClassName$',
        '$AuthorityId$',
        '$AuthorizationObjectType$',
        '$AuthorizationObjectId$'
      FROM DUAL
      WHERE NOT EXISTS ( SELECT * FROM $ScopeTableName$ WHERE EntityId = '$EntityId$' AND AuthorityId = '$AuthorityId$' AND AuthorizationObjectType = '$AuthorizationObjectType$' AND AuthorizationObjectId = '$AuthorizationObjectId$')
    </insert>
    <insert id="proc_AuthObject_AddAuthorizationScopeObject#Oracle">
      MERGE INTO $ScopeTableName$ T1   
      USING (SELECT
              N'$EntityId$' EntityId,
              N'$EntityClassName$' EntityClassName,
              N'$AuthorityId$' AuthorityId,
              N'$AuthorizationObjectType$' AuthorizationObjectType,
              N'$AuthorizationObjectId$' AuthorizationObjectId
            FROM DUAL) T2   
      ON ( T1.EntityId = T2.EntityId 
           AND T1.AuthorityId = T2.AuthorityId 
           AND T1.AuthorizationObjectType = T2.AuthorizationObjectType 
           AND T1.AuthorizationObjectId = T2.AuthorizationObjectId
         )         
      WHEN NOT MATCHED THEN    
        INSERT 
        (
            EntityId,
            EntityClassName,
            AuthorityId,
            AuthorizationObjectType,
            AuthorizationObjectId
        ) 
        VALUES 
        (
            N'$EntityId$',
            N'$EntityClassName$',
            N'$AuthorityId$',
            N'$AuthorizationObjectType$',
            N'$AuthorizationObjectId$'
        )
    </insert>
    <insert id="proc_AuthObject_AddAuthorizationScopeObject#SqlServer">
      IF NOT EXISTS ( SELECT 0 FROM $ScopeTableName$ WHERE EntityId = '$EntityId$' AND AuthorityId = '$AuthorityId$' AND AuthorizationObjectType = '$AuthorizationObjectType$' AND AuthorizationObjectId = '$AuthorizationObjectId$' )
      BEGIN
      INSERT INTO $ScopeTableName$
      (
        EntityId,
        EntityClassName,
        AuthorityId,
        AuthorizationObjectType,
        AuthorizationObjectId
      )
      VALUES
      (
        '$EntityId$',
        '$EntityClassName$',
        '$AuthorityId$',
        '$AuthorizationObjectType$',
        '$AuthorizationObjectId$'
      )
      END
    </insert>
    <delete id="proc_AuthObject_RemoveAuthorizationScopeObjects">
      DELETE FROM $ScopeTableName$
      WHERE EntityId = '$EntityId$' AND EntityClassName = '$EntityClassName$' AND AuthorityId = '$AuthorityId$'
    </delete>
    <select id="proc_AuthObject_GetAuthorizationScopeObjects" >
      SELECT DISTINCT $ScopeTableName$.AuthorizationObjectType, $ScopeTableName$.AuthorizationObjectId, AuthorizationObjectName
        FROM $ScopeTableName$ LEFT JOIN view_AuthObject ON (
              view_AuthObject.AuthorizationObjectType = $ScopeTableName$.AuthorizationObjectType
           AND view_AuthObject.AuthorizationObjectId = $ScopeTableName$.AuthorizationObjectId )
      WHERE
      EntityId = '$EntityId$' AND EntityClassName = '$EntityClassName$' AND AuthorityId = '$AuthorityId$'
    </select>
    <select id="proc_AuthObject_GetAuthorizationScopeObjects#Oracle" >
      SELECT DISTINCT $ScopeTableName$.AuthorizationObjectType, $ScopeTableName$.AuthorizationObjectId, AuthorizationObjectName
        FROM $ScopeTableName$ LEFT JOIN view_AuthObject ON (
              view_AuthObject.AuthorizationObjectType = $ScopeTableName$.AuthorizationObjectType
           AND view_AuthObject.AuthorizationObjectId = $ScopeTableName$.AuthorizationObjectId )
      WHERE
      EntityId = '$EntityId$' AND EntityClassName = '$EntityClassName$' AND AuthorityId = '$AuthorityId$'
    </select>
  </statements>
</sqlMap>