// ------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
// ------------------------------------------------------------------------------

// 
// 此源代码由 wsdl 自动生成, Version=2.0.50727.42。
// 
namespace X3Platform.Tasks.WebService.Client {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="TaskSoap", Namespace="http://tempuri.org/")]
    public partial class TaskProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SynchroTasksOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveTaskOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetTaskFinishedOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUsersFinishedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemByTaskCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemsBySenderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetItemsByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback InsertItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteItemByTaskCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsExistOperationCompleted;
        
        /// <remarks/>
        public TaskProxy(string url)
        {
            this.Url = url;
        }
        
        /// <remarks/>
        public event SynchroTasksCompletedEventHandler SynchroTasksCompleted;
        
        /// <remarks/>
        public event SendTaskCompletedEventHandler SendTaskCompleted;
        
        /// <remarks/>
        public event RemoveTaskCompletedEventHandler RemoveTaskCompleted;
        
        /// <remarks/>
        public event SetTaskFinishedCompletedEventHandler SetTaskFinishedCompleted;
        
        /// <remarks/>
        public event SetUsersFinishedCompletedEventHandler SetUsersFinishedCompleted;
        
        /// <remarks/>
        public event GetItemByTaskCodeCompletedEventHandler GetItemByTaskCodeCompleted;
        
        /// <remarks/>
        public event GetItemsBySenderCompletedEventHandler GetItemsBySenderCompleted;
        
        /// <remarks/>
        public event GetItemsByDateCompletedEventHandler GetItemsByDateCompleted;
        
        /// <remarks/>
        public event InsertItemCompletedEventHandler InsertItemCompleted;
        
        /// <remarks/>
        public event UpdateItemCompletedEventHandler UpdateItemCompleted;
        
        /// <remarks/>
        public event DeleteItemByTaskCodeCompletedEventHandler DeleteItemByTaskCodeCompleted;
        
        /// <remarks/>
        public event IsExistCompletedEventHandler IsExistCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SynchroTasks", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SynchroTasks(string applicationId, string xml) {
            object[] results = this.Invoke("SynchroTasks", new object[] {
                        applicationId,
                        xml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSynchroTasks(string applicationId, string xml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SynchroTasks", new object[] {
                        applicationId,
                        xml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSynchroTasks(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SynchroTasksAsync(string applicationId, string xml) {
            this.SynchroTasksAsync(applicationId, xml, null);
        }
        
        /// <remarks/>
        public void SynchroTasksAsync(string applicationId, string xml, object userState) {
            if ((this.SynchroTasksOperationCompleted == null)) {
                this.SynchroTasksOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSynchroTasksOperationCompleted);
            }
            this.InvokeAsync("SynchroTasks", new object[] {
                        applicationId,
                        xml}, this.SynchroTasksOperationCompleted, userState);
        }
        
        private void OnSynchroTasksOperationCompleted(object arg) {
            if ((this.SynchroTasksCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SynchroTasksCompleted(this, new SynchroTasksCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendTask(string applicationId, string xml) {
            object[] results = this.Invoke("SendTask", new object[] {
                        applicationId,
                        xml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendTask(string applicationId, string xml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendTask", new object[] {
                        applicationId,
                        xml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSendTask(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendTaskAsync(string applicationId, string xml) {
            this.SendTaskAsync(applicationId, xml, null);
        }
        
        /// <remarks/>
        public void SendTaskAsync(string applicationId, string xml, object userState) {
            if ((this.SendTaskOperationCompleted == null)) {
                this.SendTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendTaskOperationCompleted);
            }
            this.InvokeAsync("SendTask", new object[] {
                        applicationId,
                        xml}, this.SendTaskOperationCompleted, userState);
        }
        
        private void OnSendTaskOperationCompleted(object arg) {
            if ((this.SendTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendTaskCompleted(this, new SendTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveTask", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string RemoveTask(string applicationId, string taskCode) {
            object[] results = this.Invoke("RemoveTask", new object[] {
                        applicationId,
                        taskCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveTask(string applicationId, string taskCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveTask", new object[] {
                        applicationId,
                        taskCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRemoveTask(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveTaskAsync(string applicationId, string taskCode) {
            this.RemoveTaskAsync(applicationId, taskCode, null);
        }
        
        /// <remarks/>
        public void RemoveTaskAsync(string applicationId, string taskCode, object userState) {
            if ((this.RemoveTaskOperationCompleted == null)) {
                this.RemoveTaskOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveTaskOperationCompleted);
            }
            this.InvokeAsync("RemoveTask", new object[] {
                        applicationId,
                        taskCode}, this.RemoveTaskOperationCompleted, userState);
        }
        
        private void OnRemoveTaskOperationCompleted(object arg) {
            if ((this.RemoveTaskCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveTaskCompleted(this, new RemoveTaskCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetTaskFinished", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetTaskFinished(string applicationId, string taskCode) {
            object[] results = this.Invoke("SetTaskFinished", new object[] {
                        applicationId,
                        taskCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetTaskFinished(string applicationId, string taskCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetTaskFinished", new object[] {
                        applicationId,
                        taskCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSetTaskFinished(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetTaskFinishedAsync(string applicationId, string taskCode) {
            this.SetTaskFinishedAsync(applicationId, taskCode, null);
        }
        
        /// <remarks/>
        public void SetTaskFinishedAsync(string applicationId, string taskCode, object userState) {
            if ((this.SetTaskFinishedOperationCompleted == null)) {
                this.SetTaskFinishedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetTaskFinishedOperationCompleted);
            }
            this.InvokeAsync("SetTaskFinished", new object[] {
                        applicationId,
                        taskCode}, this.SetTaskFinishedOperationCompleted, userState);
        }
        
        private void OnSetTaskFinishedOperationCompleted(object arg) {
            if ((this.SetTaskFinishedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetTaskFinishedCompleted(this, new SetTaskFinishedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetUsersFinished", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SetUsersFinished(string applicationId, string taskCode, string users) {
            object[] results = this.Invoke("SetUsersFinished", new object[] {
                        applicationId,
                        taskCode,
                        users});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetUsersFinished(string applicationId, string taskCode, string users, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetUsersFinished", new object[] {
                        applicationId,
                        taskCode,
                        users}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSetUsersFinished(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetUsersFinishedAsync(string applicationId, string taskCode, string users) {
            this.SetUsersFinishedAsync(applicationId, taskCode, users, null);
        }
        
        /// <remarks/>
        public void SetUsersFinishedAsync(string applicationId, string taskCode, string users, object userState) {
            if ((this.SetUsersFinishedOperationCompleted == null)) {
                this.SetUsersFinishedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUsersFinishedOperationCompleted);
            }
            this.InvokeAsync("SetUsersFinished", new object[] {
                        applicationId,
                        taskCode,
                        users}, this.SetUsersFinishedOperationCompleted, userState);
        }
        
        private void OnSetUsersFinishedOperationCompleted(object arg) {
            if ((this.SetUsersFinishedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUsersFinishedCompleted(this, new SetUsersFinishedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemByTaskCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetItemByTaskCode(string applicationId, string taskCode) {
            object[] results = this.Invoke("GetItemByTaskCode", new object[] {
                        applicationId,
                        taskCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetItemByTaskCode(string applicationId, string taskCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetItemByTaskCode", new object[] {
                        applicationId,
                        taskCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetItemByTaskCode(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetItemByTaskCodeAsync(string applicationId, string taskCode) {
            this.GetItemByTaskCodeAsync(applicationId, taskCode, null);
        }
        
        /// <remarks/>
        public void GetItemByTaskCodeAsync(string applicationId, string taskCode, object userState) {
            if ((this.GetItemByTaskCodeOperationCompleted == null)) {
                this.GetItemByTaskCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemByTaskCodeOperationCompleted);
            }
            this.InvokeAsync("GetItemByTaskCode", new object[] {
                        applicationId,
                        taskCode}, this.GetItemByTaskCodeOperationCompleted, userState);
        }
        
        private void OnGetItemByTaskCodeOperationCompleted(object arg) {
            if ((this.GetItemByTaskCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemByTaskCodeCompleted(this, new GetItemByTaskCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemsBySender", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetItemsBySender(string applicationId, string sender, int length) {
            object[] results = this.Invoke("GetItemsBySender", new object[] {
                        applicationId,
                        sender,
                        length});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetItemsBySender(string applicationId, string sender, int length, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetItemsBySender", new object[] {
                        applicationId,
                        sender,
                        length}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetItemsBySender(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetItemsBySenderAsync(string applicationId, string sender, int length) {
            this.GetItemsBySenderAsync(applicationId, sender, length, null);
        }
        
        /// <remarks/>
        public void GetItemsBySenderAsync(string applicationId, string sender, int length, object userState) {
            if ((this.GetItemsBySenderOperationCompleted == null)) {
                this.GetItemsBySenderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemsBySenderOperationCompleted);
            }
            this.InvokeAsync("GetItemsBySender", new object[] {
                        applicationId,
                        sender,
                        length}, this.GetItemsBySenderOperationCompleted, userState);
        }
        
        private void OnGetItemsBySenderOperationCompleted(object arg) {
            if ((this.GetItemsBySenderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemsBySenderCompleted(this, new GetItemsBySenderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetItemsByDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetItemsByDate(string applicationId, string beginDate, string endDate, int length) {
            object[] results = this.Invoke("GetItemsByDate", new object[] {
                        applicationId,
                        beginDate,
                        endDate,
                        length});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetItemsByDate(string applicationId, string beginDate, string endDate, int length, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetItemsByDate", new object[] {
                        applicationId,
                        beginDate,
                        endDate,
                        length}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetItemsByDate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetItemsByDateAsync(string applicationId, string beginDate, string endDate, int length) {
            this.GetItemsByDateAsync(applicationId, beginDate, endDate, length, null);
        }
        
        /// <remarks/>
        public void GetItemsByDateAsync(string applicationId, string beginDate, string endDate, int length, object userState) {
            if ((this.GetItemsByDateOperationCompleted == null)) {
                this.GetItemsByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetItemsByDateOperationCompleted);
            }
            this.InvokeAsync("GetItemsByDate", new object[] {
                        applicationId,
                        beginDate,
                        endDate,
                        length}, this.GetItemsByDateOperationCompleted, userState);
        }
        
        private void OnGetItemsByDateOperationCompleted(object arg) {
            if ((this.GetItemsByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetItemsByDateCompleted(this, new GetItemsByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/InsertItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InsertItem(string applicationId, string xml) {
            object[] results = this.Invoke("InsertItem", new object[] {
                        applicationId,
                        xml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInsertItem(string applicationId, string xml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InsertItem", new object[] {
                        applicationId,
                        xml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndInsertItem(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InsertItemAsync(string applicationId, string xml) {
            this.InsertItemAsync(applicationId, xml, null);
        }
        
        /// <remarks/>
        public void InsertItemAsync(string applicationId, string xml, object userState) {
            if ((this.InsertItemOperationCompleted == null)) {
                this.InsertItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInsertItemOperationCompleted);
            }
            this.InvokeAsync("InsertItem", new object[] {
                        applicationId,
                        xml}, this.InsertItemOperationCompleted, userState);
        }
        
        private void OnInsertItemOperationCompleted(object arg) {
            if ((this.InsertItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InsertItemCompleted(this, new InsertItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateItem", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateItem(string applicationId, string xml) {
            object[] results = this.Invoke("UpdateItem", new object[] {
                        applicationId,
                        xml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateItem(string applicationId, string xml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateItem", new object[] {
                        applicationId,
                        xml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUpdateItem(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateItemAsync(string applicationId, string xml) {
            this.UpdateItemAsync(applicationId, xml, null);
        }
        
        /// <remarks/>
        public void UpdateItemAsync(string applicationId, string xml, object userState) {
            if ((this.UpdateItemOperationCompleted == null)) {
                this.UpdateItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateItemOperationCompleted);
            }
            this.InvokeAsync("UpdateItem", new object[] {
                        applicationId,
                        xml}, this.UpdateItemOperationCompleted, userState);
        }
        
        private void OnUpdateItemOperationCompleted(object arg) {
            if ((this.UpdateItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateItemCompleted(this, new UpdateItemCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteItemByTaskCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DeleteItemByTaskCode(string applicationId, string taskCode) {
            object[] results = this.Invoke("DeleteItemByTaskCode", new object[] {
                        applicationId,
                        taskCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteItemByTaskCode(string applicationId, string taskCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteItemByTaskCode", new object[] {
                        applicationId,
                        taskCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndDeleteItemByTaskCode(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteItemByTaskCodeAsync(string applicationId, string taskCode) {
            this.DeleteItemByTaskCodeAsync(applicationId, taskCode, null);
        }
        
        /// <remarks/>
        public void DeleteItemByTaskCodeAsync(string applicationId, string taskCode, object userState) {
            if ((this.DeleteItemByTaskCodeOperationCompleted == null)) {
                this.DeleteItemByTaskCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteItemByTaskCodeOperationCompleted);
            }
            this.InvokeAsync("DeleteItemByTaskCode", new object[] {
                        applicationId,
                        taskCode}, this.DeleteItemByTaskCodeOperationCompleted, userState);
        }
        
        private void OnDeleteItemByTaskCodeOperationCompleted(object arg) {
            if ((this.DeleteItemByTaskCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteItemByTaskCodeCompleted(this, new DeleteItemByTaskCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsExist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsExist(string applicationId, string taskCode) {
            object[] results = this.Invoke("IsExist", new object[] {
                        applicationId,
                        taskCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsExist(string applicationId, string taskCode, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsExist", new object[] {
                        applicationId,
                        taskCode}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndIsExist(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsExistAsync(string applicationId, string taskCode) {
            this.IsExistAsync(applicationId, taskCode, null);
        }
        
        /// <remarks/>
        public void IsExistAsync(string applicationId, string taskCode, object userState) {
            if ((this.IsExistOperationCompleted == null)) {
                this.IsExistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsExistOperationCompleted);
            }
            this.InvokeAsync("IsExist", new object[] {
                        applicationId,
                        taskCode}, this.IsExistOperationCompleted, userState);
        }
        
        private void OnIsExistOperationCompleted(object arg) {
            if ((this.IsExistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsExistCompleted(this, new IsExistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SynchroTasksCompletedEventHandler(object sender, SynchroTasksCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SynchroTasksCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SynchroTasksCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SendTaskCompletedEventHandler(object sender, SendTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void RemoveTaskCompletedEventHandler(object sender, RemoveTaskCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveTaskCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveTaskCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetTaskFinishedCompletedEventHandler(object sender, SetTaskFinishedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetTaskFinishedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetTaskFinishedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SetUsersFinishedCompletedEventHandler(object sender, SetUsersFinishedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetUsersFinishedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetUsersFinishedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetItemByTaskCodeCompletedEventHandler(object sender, GetItemByTaskCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemByTaskCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemByTaskCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetItemsBySenderCompletedEventHandler(object sender, GetItemsBySenderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemsBySenderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemsBySenderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetItemsByDateCompletedEventHandler(object sender, GetItemsByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetItemsByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetItemsByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void InsertItemCompletedEventHandler(object sender, InsertItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InsertItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InsertItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateItemCompletedEventHandler(object sender, UpdateItemCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateItemCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateItemCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteItemByTaskCodeCompletedEventHandler(object sender, DeleteItemByTaskCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteItemByTaskCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteItemByTaskCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void IsExistCompletedEventHandler(object sender, IsExistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsExistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsExistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
