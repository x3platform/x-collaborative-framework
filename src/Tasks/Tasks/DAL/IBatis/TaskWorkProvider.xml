<?xml version="1.0" encoding="utf-8" ?>
<sqlMap namespace="X3Platform.Tasks.DAL.IBatis.TaskWorkProvider" xmlns="http://ibatis.apache.org/mapping" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" >
  <alias>
    <typeAlias alias="TaskWorkInfo" type="X3Platform.Tasks.Model.TaskWorkInfo,X3Platform.Tasks" />
  </alias>
  <resultMaps>
    <resultMap id="proc_Task_FindOne_Result" class="TaskWorkInfo">
      <result property="Id" column="Id" />
      <result property="ApplicationId" column="ApplicationId" />
      <result property="TaskCode" column="TaskCode" />
      <result property="Type" column="Type" />
      <result property="Title" column="Title" />
      <result property="Content" column="Content" />
      <result property="Tags" column="Tags" />
      <result property="SenderId" column="SenderId" />
      <result property="CreateDate" column="CreateDate" />
    </resultMap>
    <resultMap id="proc_Task_FindAll_Result" class="X3Platform.Tasks.Model.TaskWorkItemInfo,X3Platform.Tasks">
      <result property="Id" column="Id" />
      <result property="ApplicationId" column="ApplicationId" />
      <result property="TaskCode" column="TaskCode" />
      <result property="Type" column="Type" />
      <result property="Title" column="Title" />
      <result property="Content" column="Content" />
      <result property="Tags" column="Tags" />
      <result property="SenderId" column="SenderId" />
      <result property="ReceiverId" column="ReceiverId" />
      <result property="Status" column="Status" />
      <result property="IsRead" column="IsRead" />
      <result property="FinishTime" column="FinishTime" />
      <result property="CreateDate" column="CreateDate" />
    </resultMap>
  </resultMaps>

  <statements>
    <insert id="proc_Task_Insert#SqlServer" parameterClass="X3Platform.Tasks.Model.TaskWorkItemInfo,X3Platform.Tasks" >
      INSERT INTO tb_Task_WorkItem
      (
        Id,
        ApplicationId,
        TaskCode,
        Type,
        Title,
        Content,
        Tags,
        SenderId,
        ReceiverId,
        Status,
        IsRead,
        FinishTime,
        CreateDate
      )
      VALUES
      (
        #Id#,
        #ApplicationId#,
        #TaskCode#,
        #Type#,
        #Title#,
        #Content#,
        #Tags#,
        #SenderId#,
        #ReceiverId#,
        #Status#,
        #IsRead#,
        #FinishTime#,
        CURRENT_TIMESTAMP
      )
    </insert>
    <insert id="proc_Task_Insert#MySql" parameterClass="X3Platform.Tasks.Model.TaskWorkItemInfo,X3Platform.Tasks" >
      INSERT INTO tb_Task_WorkItem
      (
        Id,
        ApplicationId,
        TaskCode,
        Type,
        Title,
        Content,
        Tags,
        SenderId,
        ReceiverId,
        Status,
        IsRead,
        FinishTime,
        CreateDate
      )
      SELECT
        #Id#,
        #ApplicationId#,
        #TaskCode#,
        #Type#,
        #Title#,
        #Content#,
        #Tags#,
        #SenderId#,
        #ReceiverId#,
        #Status#,
        #IsRead#,
        #FinishTime#,
        CURRENT_TIMESTAMP
      FROM DUAL
      WHERE NOT EXISTS ( SELECT * FROM tb_Task_WorkItem WHERE Id = #Id# AND ReceiverId = #ReceiverId#)
    </insert>

    <update id="proc_Task_Update" parameterClass="TaskWorkInfo">
      UPDATE tb_Task_WorkItem SET

      ApplicationId = #ApplicationId#,
      TaskCode = #TaskCode#,
      Type = #Type#,
      Title = #Title#,
      Content = #Content#,
      Tags = #Tags#,
      SenderId = #SenderId#

      WHERE Id = #Id#
    </update>

    <insert id="proc_Task_Save" parameterClass="TaskWorkInfo">
      IF EXISTS(SELECT 0 FROM tb_Task WHERE Id = #Id#)
      BEGIN
      UPDATE tb_Task SET

      ApplicationId = #ApplicationId#,
      TaskCode = #TaskCode#,
      Type = #Type#,
      Title = #Title#,
      Content = #Content#,
      Tags = #Tags#,
      SenderId = #SenderId#

      WHERE Id = #Id#
      END
      ELSE
      BEGIN
      INSERT INTO tb_Task
      (
      Id,
      ApplicationId,
      TaskCode,
      Type,
      Title,
      Content,
      Tags,
      SenderId,
      CreateDate
      )
      VALUES
      (
      #Id#,
      #ApplicationId#,
      #TaskCode#,
      #Type#,
      #Title#,
      #Content#,
      #Tags#,
      #SenderId#,
      CURRENT_TIMESTAMP
      )
      END
    </insert>
    <delete id="proc_Task_Delete" parameterClass="TaskWorkInfo">
      DELETE FROM tb_Task_WorkItem WHERE $WhereClause$
    </delete>
    <delete id="proc_Task_DeleteByTaskCode" parameterClass="TaskWorkInfo" >
      DELETE FROM tb_Task_WorkItem WHERE ApplicationId = #ApplicationId# AND TaskCode = #TaskCode#
    </delete>
    <select id="proc_Task_FindOne" parameterClass="TaskWorkInfo" resultMap="proc_Task_FindOne_Result" >
      SELECT * FROM tb_Task_WorkItem WHERE Id = #Id#
    </select>
    <select id="proc_Task_FindOneByTaskCode" parameterClass="TaskWorkInfo" resultMap="proc_Task_FindOne_Result" >
      SELECT * FROM tb_Task_WorkItem WHERE ApplicationId = #ApplicationId# AND TaskCode = #TaskCode#
    </select>
    <select id="proc_Task_FindAll#MySql" resultMap="proc_Task_FindAll_Result" >
      SELECT * FROM tb_Task_WorkItem T

      <dynamic prepend="WHERE">
        <isParameterPresent>
          <isNotEmpty prepend="AND" property="WhereClause" >
            $WhereClause$
          </isNotEmpty>
        </isParameterPresent>
      </dynamic>

      <dynamic prepend="ORDER BY">
        <isParameterPresent>
          <isNotEmpty prepend="AND" property="OrderBy" >
            $OrderBy$
          </isNotEmpty>
        </isParameterPresent>
      </dynamic>

      <dynamic prepend="LIMIT">
        <isNotEqual prepend="LIMIT" property="Length" compareValue = "0">
          0, $Length$
        </isNotEqual>
      </dynamic>
    </select>
    <select id="proc_Task_FindAll#SqlServer" resultMap="proc_Task_FindAll_Result" >
      SELECT

      <dynamic prepend="TOP">
        <isNotEqual prepend="TOP" property="Length" compareValue = "0">
          $Length$
        </isNotEqual>
      </dynamic>

      * FROM tb_Task_WorkItem T

      <dynamic prepend="WHERE">
        <isParameterPresent>
          <isNotEmpty prepend="AND" property="WhereClause" >
            $WhereClause$
          </isNotEmpty>
        </isParameterPresent>
      </dynamic>
    </select>
    <select id="proc_Task_GetPaging" resultMap="proc_Task_FindAll_Result" >
      SELECT *

      FROM (SELECT *, ROW_NUMBER() OVER(ORDER BY $OrderBy$) AS RowIndex

      FROM tb_Task_WorkItem T

      <dynamic prepend="WHERE">
        <isParameterPresent>
          <isNotEmpty prepend="AND" property="WhereClause" >
            $WhereClause$
          </isNotEmpty>
        </isParameterPresent>
      </dynamic>) TableIndex

      WHERE TableIndex.RowIndex BETWEEN $StartIndex$ + 1 AND $StartIndex$ + $PageSize$
    </select>
    <select id="proc_Task_GetRowCount" >
      SELECT COUNT(0) AS "RowCount" FROM tb_Task_WorkItem T

      <dynamic prepend="WHERE">
        <isParameterPresent>
          <isNotEmpty prepend="AND" property="WhereClause" >
            $WhereClause$
          </isNotEmpty>
        </isParameterPresent>
      </dynamic>
    </select>
    <select id="proc_Task_IsExist" >
      SELECT COUNT(0) AS "Count" FROM tb_Task_WorkItem WHERE $WhereClause$
    </select>
    <update id="proc_Task_SetTitle" parameterClass="TaskWorkInfo" >
      UPDATE tb_Task_WorkItem SET Title = #Title# WHERE ApplicationId = #ApplicationId# AND TaskCode = #TaskCode#
    </update>
    <update id="proc_Task_SetFinished" parameterClass="TaskWorkInfo" >
      UPDATE tb_Task_Receiver SET Status = 1, FinishTime = CURRENT_TIMESTAMP WHERE TaskId IN ( SELECT Id FROM tb_Task WHERE ApplicationId = #ApplicationId# AND TaskCode = #TaskCode# )
    </update>
    <select id="proc_Task_GetIdsByTaskCodes" >
      SELECT Id FROM tb_Task_WorkItem WHERE $WhereClause$
    </select>
    <select id="proc_Task_GetTaskTags" >
      SELECT DISTINCT Tags FROM tb_Task_WorkItem
      <dynamic prepend="WHERE">
        <isParameterPresent>
          <isNotEmpty prepend="AND" property="WhereClause" >
            $WhereClause$
          </isNotEmpty>
        </isParameterPresent>
      </dynamic>
    </select>
    <insert id="proc_Task_Archive">
      INSERT INTO tb_Task_HistoryItem
      SELECT * FROM tb_Task_WorkItem
      WHERE
      NOT EXISTS ( SELECT 0 FROM tb_Task_HistoryItem
      WHERE
      tb_Task_WorkItem.Id = tb_Task_HistoryItem.Id
      AND tb_Task_WorkItem.ReceiverId = tb_Task_HistoryItem.ReceiverId )
      AND Status = 1 AND $WhereClause$
    </insert>
    <delete id="proc_Task_RemoveHistoryItems">
      DELETE FROM tb_Task_HistoryItem WHERE $WhereClause$
    </delete>
  </statements>
</sqlMap>
